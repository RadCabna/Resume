//
//  SurveyManager.swift
//  Resume
//
//  Created by –ê–ª–∫–µ–∫—Å–∞–Ω–¥—Ä –°—Ç–µ–ø–∞–Ω–æ–≤ on 24.08.2025.
//

import Foundation
import CoreData
import SwiftUI

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–º —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏
class SurveyManager: ObservableObject {
    // –¢–µ–∫—É—â–∏–π —à–∞–≥ –æ–ø—Ä–æ—Å–∞ (0-7 –¥–ª—è 8 —ç–∫—Ä–∞–Ω–æ–≤)
    @Published var stepNumber = 0
    
    // –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
    @Published var formData = SurveyFormData()
    
    // –¢–µ–∫—É—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫ Person –≤ CoreData
    @Published var draftPerson: Person?
    
    // CoreData context
    private let viewContext: NSManagedObjectContext
    
    init(context: NSManagedObjectContext) {
        self.viewContext = context
        loadOrCreateDraft()
    }
    
    // MARK: - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    func loadOrCreateDraft() {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
        let request: NSFetchRequest<Person> = Person.fetchRequest()
        request.predicate = NSPredicate(format: "isDraft == true AND isComplete == false")
        request.sortDescriptors = [NSSortDescriptor(key: "lastModified", ascending: false)]
        request.fetchLimit = 1
        
        do {
            let drafts = try viewContext.fetch(request)
            if let existingDraft = drafts.first {
                draftPerson = existingDraft
                loadDataFromDraft()
            } else {
                createNewDraft()
            }
        } catch {
            print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: \(error)")
            createNewDraft()
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ CoreData
    private func createNewDraft() {
        let draft = Person(context: viewContext)
        draft.isDraft = true        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
        draft.isComplete = false    // –ï—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
        draft.createdAt = Date()    // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        
        draftPerson = draft
        saveDraft()
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ CoreData –≤ formData (–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å)
    private func loadDataFromDraft() {
        guard let draft = draftPerson else { return }
        
        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CoreData –≤ formData
        formData.name = draft.name ?? ""
        formData.surname = draft.surname ?? ""
        formData.email = draft.email ?? ""
        formData.phone = draft.phone ?? ""
        formData.website = draft.website ?? ""
        formData.address = draft.address ?? ""
        formData.adress_1 = draft.adress_1 ?? ""
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        loadEducationsFromDraft(draft)
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑ CoreData –≤ formData (–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å)
    private func loadEducationsFromDraft(_ draft: Person) {
        let request: NSFetchRequest<Education> = Education.fetchRequest()
        request.predicate = NSPredicate(format: "person == %@", draft)
        request.sortDescriptors = [NSSortDescriptor(key: "whenStart", ascending: false)]
        
        do {
            let educations = try viewContext.fetch(request)
            formData.educations = educations.map { EducationData(from: $0) }
            print("üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π: \(educations.count)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π: \(error)")
            formData.educations = []
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ formData –≤ —á–µ—Ä–Ω–æ–≤–∏–∫ CoreData
    func saveDraft() {
        guard let draft = draftPerson else { return }
        
        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ formData –≤ CoreData
        draft.name = formData.name
        draft.surname = formData.surname
        draft.email = formData.email
        draft.phone = formData.phone
        draft.website = formData.website
        draft.address = formData.address
        draft.adress_1 = formData.adress_1
        draft.lastModified = Date()
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ CoreData
        saveEducationsToDraft(draft)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        do {
            try viewContext.save()
            print("–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: \(draft.name ?? "") \(draft.surname ?? "")")
        } catch {
            print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞: \(error)")
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑ formData –≤ CoreData
    private func saveEducationsToDraft(_ draft: Person) {
        // 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        deleteExistingEducations(for: draft)
        
        // 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        createNewEducations(for: draft)
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è Person
    private func deleteExistingEducations(for person: Person) {
        let request: NSFetchRequest<Education> = Education.fetchRequest()
        request.predicate = NSPredicate(format: "person == %@", person)
        
        do {
            let existingEducations = try viewContext.fetch(request)
            for education in existingEducations {
                viewContext.delete(education)
            }
            print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π: \(existingEducations.count)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π: \(error)")
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è Person
    private func createNewEducations(for person: Person) {
        for educationData in formData.educations {
            let education = Education(context: viewContext)
            education.isCurrentlyStudying = educationData.isCurrentlyStudying
            education.schoolName = educationData.schoolName
            education.whenFinished = educationData.isCurrentlyStudying ? nil : educationData.whenFinished
            education.whenStart = educationData.whenStart
            education.person = person  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å
        }
        print("üìö –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π: \(formData.educations.count)")
    }
    
    // MARK: - –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω
    func nextStep() {
        print("üîÑ nextStep() –≤—ã–∑–≤–∞–Ω. –¢–µ–∫—É—â–∏–π stepNumber: \(stepNumber)")
        print("üìù formData.name: '\(formData.name)', formData.surname: '\(formData.surname)', formData.email: '\(formData.email)'")
        print("üìö formData.educations.count: \(formData.educations.count)")
        print("‚úÖ isCurrentStepValid(): \(isCurrentStepValid())")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
//        guard isCurrentStepValid() else {
//            print("‚ùå –¢–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
//            return
//        }
        
        saveDraft()

        if stepNumber < 7 {
            stepNumber += 1
        } else {
            _ = completeSurvey()
        }
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
    func previousStep() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CoreData
        saveDraft()
        
        if stepNumber > 0 {
            stepNumber -= 1
        }
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ (–ø–æ–º–µ—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π)
    @discardableResult
    func completeSurvey() -> Bool {
        guard let draft = draftPerson else { return false }
        
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        saveDraft()
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π (–±–æ–ª—å—à–µ –Ω–µ —á–µ—Ä–Ω–æ–≤–∏–∫)
        draft.isDraft = false
        draft.isComplete = true
        draft.completedAt = Date()
        
        do {
            try viewContext.save()
            print("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è: \(draft.name ?? "") \(draft.surname ?? "")")
            
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
            draftPerson = nil
            formData = SurveyFormData() // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—ã
            stepNumber = 0 // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω
            
            return true
        } catch {
            print("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞: \(error)")
            return false
        }
    }
    
    // MARK: - –í–∞–ª–∏–¥–∞—Ü–∏—è
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
    func isCurrentStepValid() -> Bool {
        switch stepNumber {
        case 0: // Intro —ç–∫—Ä–∞–Ω - –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
            return !formData.name.trimmingCharacters(in: .whitespaces).isEmpty &&
                   !formData.surname.trimmingCharacters(in: .whitespaces).isEmpty
            
        case 1: // Contacts —ç–∫—Ä–∞–Ω - email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            return !formData.email.trimmingCharacters(in: .whitespaces).isEmpty
            
        case 2: // Education —ç–∫—Ä–∞–Ω - —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            return !formData.educations.isEmpty && 
                   formData.educations.allSatisfy { $0.isValid }
            
        default:
            return true // –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        }
    }
}

// MARK: - Data Models

// –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
class SurveyFormData: ObservableObject {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    @Published var name = ""
    @Published var surname = ""
    @Published var email = ""
    @Published var phone = ""
    @Published var website = ""
    @Published var address = ""
    @Published var adress_1 = ""
    
    // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    @Published var educations: [EducationData] = []
}

// MARK: - EducationData –∫–ª–∞—Å—Å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
class EducationData: ObservableObject, Identifiable {
    let id = UUID()
    @Published var isCurrentlyStudying = false
    @Published var schoolName = ""
    @Published var whenFinished = ""
    @Published var whenStart = ""
    
    init() {}
    
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–∑ CoreData –æ–±—ä–µ–∫—Ç–∞ Education
    init(from education: Education) {
        self.isCurrentlyStudying = education.isCurrentlyStudying
        self.schoolName = education.schoolName ?? ""
        self.whenFinished = education.whenFinished ?? ""
        self.whenStart = education.whenStart ?? ""
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    var isValid: Bool {
        return !schoolName.trimmingCharacters(in: .whitespaces).isEmpty
    }
}


