//
//  PDF_2.swift
//  Resume
//
//  Created by –ê–ª–∫–µ–∫—Å–∞–Ω–¥—Ä –°—Ç–µ–ø–∞–Ω–æ–≤ on 15.09.2025.
//

import SwiftUI
import PDFKit
import UIKit

// MARK: - PDF_2 Generator Class
class PDF_2_Generator: ObservableObject {
    
    // MARK: - Page Configuration
    /// –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã A4 –≤ —Ç–æ—á–∫–∞—Ö (2480x3508)
    private let pageSize = CGSize(width: 2480, height: 3508)
    
    // –î–µ–ª–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ 3 —á–∞—Å—Ç–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    private let topSectionHeight: CGFloat = 787  // pageSize.height / 3
    private let middleSectionHeight: CGFloat = 1169
    private let bottomSectionHeight: CGFloat = 1170  // –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    
    // MARK: - Font Configuration
    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    private struct FontConfig {
        static let nameFont = UIFont(name: "Figtree-ExtraBold", size: 150) ?? UIFont.boldSystemFont(ofSize: 28)
        static let surnameFont = UIFont(name: "Figtree-ExtraBold", size: 150) ?? UIFont.boldSystemFont(ofSize: 28)
        static let positionFont = UIFont(name: "Figtree-Medium", size: 80) ?? UIFont.systemFont(ofSize: 16)
        static let sectionTitleFont = UIFont(name: "Figtree-Bold", size: 70) ?? UIFont.systemFont(ofSize: 18, weight: .medium)
        static let contentFont = UIFont(name: "Figtree-Regular", size: 36) ?? UIFont.systemFont(ofSize: 12)
        static let smallFont = UIFont(name: "Figtree-Regular", size: 36) ?? UIFont.systemFont(ofSize: 10)
        static let infoFont = UIFont(name: "Figtree-Medium", size: 40) ?? UIFont.systemFont(ofSize: 10)
    }
    
    // MARK: - Color Configuration
    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤
    private struct ColorConfig {
        static let nameColor = UIColor.blue
        static let surnameColor = UIColor.blue
        static let positionColor = UIColor.onboardingColor2
        static let sectionTitleColor = UIColor.black
        static let contentColor = UIColor.black
        static let contactColor = UIColor.white
        static let periodColor = UIColor.pdFpediod
    }
    
    // MARK: - Layout Configuration
    private struct LayoutConfig {
        // –û—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        static let smallSpacing: CGFloat = 5
        static let mediumSpacing: CGFloat = 10
        static let largeSpacing: CGFloat = 15
        
        // –û—Ç—Å—Ç—É–ø—ã –æ—Ç –∫—Ä–∞–µ–≤
        static let pageMargin: CGFloat = 50
    }
    
    // MARK: - Main PDF Generation Method
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
     * @param formData - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã
     * @param userPhoto - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * @return Data? - –≥–æ—Ç–æ–≤—ã–π PDF –≤ –≤–∏–¥–µ –¥–∞–Ω–Ω—ã—Ö
     */
    func generatePDF(formData: SurveyFormData, userPhoto: UIImage? = nil) -> Data? {
        // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
        let documentInfo = [
            kCGPDFContextTitle: "\(formData.name) \(formData.surname) - Resume",
            kCGPDFContextAuthor: "\(formData.name) \(formData.surname)",
            kCGPDFContextSubject: "Professional Resume",
            kCGPDFContextCreator: "Resume App"
        ]
        
        // –°–æ–∑–¥–∞–µ–º PDF renderer
        let format = UIGraphicsPDFRendererFormat()
        let renderer = UIGraphicsPDFRenderer(bounds: CGRect(origin: .zero, size: pageSize), format: format)
        
        let pdfData = renderer.pdfData { context in
            // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            context.beginPage()
            let cgContext = context.cgContext
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é —Å–µ–∫—Ü–∏—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            drawTopSection(formData: formData, userPhoto: userPhoto, in: cgContext)
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫—Ä—É–≥–ª–æ–µ —Ñ–æ—Ç–æ –≤ –ø–µ—Ä–≤–æ–π —Ç—Ä–µ—Ç–∏
            drawCircularPhoto(userPhoto: userPhoto, in: cgContext)
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–º—è –≤ –æ–±–ª–∞—Å—Ç–∏ 4
            drawNameInArea4(formData: formData, in: cgContext)
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–ª–æ–∫ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã
            drawExperienceBlock(formData: formData, in: cgContext)
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–ª–æ–∫ —Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
            drawEducationBlock(formData: formData, in: cgContext)
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–ª–æ–∫ About Me
            drawAboutMeBlock(formData: formData, in: cgContext)
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–ª–æ–∫ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            drawContactBlock(formData: formData, in: cgContext)
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–ª–æ–∫ —Å–æ —Å–∫–∏–ª–ª–∞–º–∏
            drawSkillsBlock(formData: formData, in: cgContext)
            
            print("üéØ PDF_2 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        }
        
        return pdfData
    }
    
    // MARK: - Top Section Drawing
    /**
     * –†–∏—Å—É–µ—Ç –≤–µ—Ä—Ö–Ω—é—é —Å–µ–∫—Ü–∏—é —Å —Ñ–æ–Ω–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
     */
    private func drawTopSection(formData: SurveyFormData, userPhoto: UIImage?, in context: CGContext) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –≤–µ—Ä—Ö–Ω–µ–π —Å–µ–∫—Ü–∏–∏
        let topSectionRect = CGRect(x: 0, y: 0, width: pageSize.width, height: topSectionHeight)
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_topRect
        if let topRectImage = UIImage(named: "pdf_2_topRect") {
            // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É –≤–µ—Ä—Ö–Ω–µ–π —Å–µ–∫—Ü–∏–∏
            let drawRect = topSectionRect
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            topRectImage.draw(in: drawRect)
            print("üñºÔ∏è –í–µ—Ä—Ö–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã: \(drawRect)")
        } else {
            // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ä–∏—Å—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            context.setFillColor(UIColor.lightGray.cgColor)
            context.fill(topSectionRect)
            print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_topRect –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞")
        }
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤–Ω—É—Ç—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è pdf_2_topRect —Å —á–µ—Ä–Ω–æ–π —Ä–∞–º–∫–æ–π
     */
    private func drawNameInArea4(formData: SurveyFormData, in context: CGContext) {
        // –û–±–ª–∞—Å—Ç—å –≤–µ—Ä—Ö–Ω–µ–π —Å–µ–∫—Ü–∏–∏ (–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è pdf_2_topRect)
        let topSectionRect = CGRect(x: 0, y: 0, width: pageSize.width, height: topSectionHeight)
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
        let fullName = "\(formData.name) \(formData.surname)"
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç ExtraBold —Ä–∞–∑–º–µ—Ä–æ–º 150
        guard let font = UIFont(name: "Figtree-ExtraBold", size: 150) else {
            print("‚ùå –®—Ä–∏—Ñ—Ç Figtree-ExtraBold –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Ç–µ–∫—Å—Ç–∞
        let textAttributes: [NSAttributedString.Key: Any] = [
            .font: font,
            .foregroundColor: UIColor.black
        ]
        
        let attributedString = NSAttributedString(string: fullName, attributes: textAttributes)
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
        let textSize = attributedString.size()
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
        let blackRectWidth = textSize.width + 150  // –®–∏—Ä–∏–Ω–∞ –±–æ–ª—å—à–µ –Ω–∞ 150
        let blackRectHeight = textSize.height + 150  // –í—ã—Å–æ—Ç–∞ –±–æ–ª—å—à–µ –Ω–∞ 150
        let whiteRectWidth = blackRectWidth - 16  // –ë–µ–ª—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –º–µ–Ω—å—à–µ –Ω–∞ 16
        let whiteRectHeight = blackRectHeight - 16  // –ë–µ–ª—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –º–µ–Ω—å—à–µ –Ω–∞ 16
        
        // –î–µ–ª–∏–º —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ 3 —á–∞—Å—Ç–∏ –∏ –Ω–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—É –º–µ–∂–¥—É 2-–π –∏ 3-–π —Ç—Ä–µ—Ç—è–º–∏ (—Å–¥–≤–∏–≥–∞–µ–º –ª–µ–≤–µ–µ –∏ –Ω–∏–∂–µ –Ω–∞ 85)
        let thirdWidth = pageSize.width / 3
        let centerX = thirdWidth * 2 - 85  // –ì—Ä–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É 2-–π –∏ 3-–π —Ç—Ä–µ—Ç—è–º–∏ + —Å–º–µ—â–µ–Ω–∏–µ –≤–ª–µ–≤–æ
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —á–µ—Ä–Ω–æ–π —Ä–∞–º–∫–∏ –±—ã–ª–∞ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 232 –æ—Ç –≤–µ—Ä—Ö–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        let blackRectTopY: CGFloat = 232
        let centerY = blackRectTopY + blackRectHeight / 2
        
        // –ü–æ–∑–∏—Ü–∏–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
        let blackRect = CGRect(
            x: centerX - blackRectWidth / 2,
            y: blackRectTopY,
            width: blackRectWidth,
            height: blackRectHeight
        )
        
        let whiteRect = CGRect(
            x: centerX - whiteRectWidth / 2,
            y: centerY - whiteRectHeight / 2,
            width: whiteRectWidth,
            height: whiteRectHeight
        )
        
        // –†–∏—Å—É–µ–º —á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        context.setFillColor(UIColor.black.cgColor)
        context.fill(blackRect)
        
        // –†–∏—Å—É–µ–º –±–µ–ª—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –ø–æ–≤–µ—Ä—Ö
        context.setFillColor(UIColor.white.cgColor)
        context.fill(whiteRect)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Ä–∞–º–∫–∏
        let profession = formData.works.first?.position ?? "Professional"
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (SemiBold 64)
        guard let professionFont = UIFont(name: "Figtree-SemiBold", size: 64) else {
            print("‚ùå –®—Ä–∏—Ñ—Ç Figtree-SemiBold –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        }
        
        let professionAttributes: [NSAttributedString.Key: Any] = [
            .font: professionFont,
            .foregroundColor: UIColor.black
        ]
        
        let professionString = NSAttributedString(string: profession, attributes: professionAttributes)
        let professionSize = professionString.size()
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –±–µ–ª–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (–ø–æ —Ü–µ–Ω—Ç—Ä—É –Ω–∏–∂–Ω–µ–π –ª–∏–Ω–∏–∏)
        let professionRectWidth = professionSize.width + 150  // –®–∏—Ä–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞ 100
        let professionRectHeight = 16  // –í—ã—Å–æ—Ç–∞ —Ä–∞–≤–Ω–∞ —Ç–æ–ª—â–∏–Ω–µ —Ä–∞–º–∫–∏ (8*2)
        
        let professionRectY = blackRect.maxY - 8  // –ü–æ —Ü–µ–Ω—Ç—Ä—É –Ω–∏–∂–Ω–µ–π –ª–∏–Ω–∏–∏ —á–µ—Ä–Ω–æ–π —Ä–∞–º–∫–∏
        let professionWhiteRect = CGRect(
            x: centerX - professionRectWidth / 2,
            y: professionRectY - CGFloat(professionRectHeight / 2),
            width: professionRectWidth,
            height: CGFloat(professionRectHeight)
        )
        
        // –†–∏—Å—É–µ–º –±–µ–ª—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è "—Å—Ç–∏—Ä–∞–Ω–∏—è" —á–∞—Å—Ç–∏ –Ω–∏–∂–Ω–µ–π –ª–∏–Ω–∏–∏
        context.setFillColor(UIColor.white.cgColor)
        context.fill(professionWhiteRect)
        
        // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        let professionPosition = CGPoint(
            x: centerX - professionSize.width / 2,
            y: professionRectY - professionSize.height / 2
        )
        
        professionString.draw(at: professionPosition)
        
        // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –∏–º–µ–Ω–∏ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
        let textPosition = CGPoint(
            x: centerX - textSize.width / 2,
            y: centerY - textSize.height / 2
        )
        
        attributedString.draw(at: textPosition)
        
        print("üìù –ò–º—è '\(fullName)' –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è '\(profession)' –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω—ã —Å —á–µ—Ä–Ω–æ–π —Ä–∞–º–∫–æ–π")
        print("üìè –ß–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫: \(blackRect)")
        print("üìè –ë–µ–ª—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫: \(whiteRect)")
        print("üìè –ë–µ–ª—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: \(professionWhiteRect)")
        print("üìè –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–º–µ–Ω–∏: \(textPosition)")
        print("üìè –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: \(professionPosition)")
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫—Ä—É–≥–ª–æ–µ —Ñ–æ—Ç–æ –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–µ—Ä–≤–æ–π —Ç—Ä–µ—Ç–∏ –≤–µ—Ä—Ö–Ω–µ–π —Å–µ–∫—Ü–∏–∏
     */
    private func drawCircularPhoto(userPhoto: UIImage?, in context: CGContext) {
        guard let photo = userPhoto else {
            print("‚ö†Ô∏è –§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏")
            return
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –ø–µ—Ä–≤–æ–π —Ç—Ä–µ—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å–¥–≤–∏–≥–∞–µ–º –ø—Ä–∞–≤–µ–µ –Ω–∞ 85)
        let thirdWidth = pageSize.width / 3
        let centerX = thirdWidth / 2 + 85  // –¶–µ–Ω—Ç—Ä –ø–µ—Ä–≤–æ–π —Ç—Ä–µ—Ç–∏ + —Å–º–µ—â–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä—É–≥–ª–æ–≥–æ —Ñ–æ—Ç–æ
        let photoDiameter: CGFloat = 425
        let photoRadius = photoDiameter / 2
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –∫—Ä—É–≥–∞ –±—ã–ª–∞ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 232 –æ—Ç –≤–µ—Ä—Ö–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        let photoTopY: CGFloat = 232
        let centerY = photoTopY + photoRadius
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—Ä—É–≥–ª–æ–≥–æ —Ñ–æ—Ç–æ
        let photoRect = CGRect(
            x: centerX - photoRadius,
            y: photoTopY,
            width: photoDiameter,
            height: photoDiameter
        )
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.saveGState()
        
        // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –º–∞—Å–∫—É
        let circlePath = UIBezierPath(ovalIn: photoRect)
        context.addPath(circlePath.cgPath)
        context.clip()
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π (scaledToFill)
        let photoAspectRatio = photo.size.width / photo.size.height
        let circleAspectRatio: CGFloat = 1.0  // –ö—Ä—É–≥ –≤—Å–µ–≥–¥–∞ 1:1
        
        var drawRect: CGRect
        
        if photoAspectRatio > circleAspectRatio {
            // –§–æ—Ç–æ —à–∏—Ä–µ - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
            let scaledWidth = photoDiameter * photoAspectRatio
            let offsetX = centerX - scaledWidth / 2
            drawRect = CGRect(x: offsetX, y: centerY - photoRadius, width: scaledWidth, height: photoDiameter)
        } else {
            // –§–æ—Ç–æ –≤—ã—à–µ - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
            let scaledHeight = photoDiameter / photoAspectRatio
            let offsetY = centerY - scaledHeight / 2
            drawRect = CGRect(x: centerX - photoRadius, y: offsetY, width: photoDiameter, height: scaledHeight)
        }
        
        // –†–∏—Å—É–µ–º —Ñ–æ—Ç–æ
        photo.draw(in: drawRect)
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.restoreGState()
        
        print("üì∏ –ö—Ä—É–≥–ª–æ–µ —Ñ–æ—Ç–æ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–µ—Ä–≤–æ–π —Ç—Ä–µ—Ç–∏")
        print("üìè –ü–æ–∑–∏—Ü–∏—è —Ñ–æ—Ç–æ: \(photoRect)")
        print("üìè –û–±–ª–∞—Å—Ç—å –æ—Ç—Ä–∏—Å–æ–≤–∫–∏: \(drawRect)")
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –±–ª–æ–∫ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã
     */
    private func drawExperienceBlock(formData: SurveyFormData, in context: CGContext) {
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∞
        let blockX: CGFloat = 155
        let blockY: CGFloat = topSectionHeight + 60  // –ù–∏–∂–µ –≤–µ—Ä—Ö–Ω–µ–π —Å–µ–∫—Ü–∏–∏ —Å –æ—Ç—Å—Ç—É–ø–æ–º 60
        let blockWidth: CGFloat = 1406
        let blockHeight: CGFloat = 1114
        
        let blockRect = CGRect(x: blockX, y: blockY, width: blockWidth, height: blockHeight)
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ EXPERIENCE
        guard let titleFont = UIFont(name: "Figtree-Bold", size: 64) else {
            print("‚ùå –®—Ä–∏—Ñ—Ç Figtree-Bold –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        }
        
        let titleAttributes: [NSAttributedString.Key: Any] = [
            .font: titleFont,
            .foregroundColor: UIColor.black
        ]
        
        let titleString = NSAttributedString(string: "EXPERIENCE", attributes: titleAttributes)
        let titlePosition = CGPoint(x: blockX, y: blockY)
        titleString.draw(at: titlePosition)
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è pdf_2_longSkroll
        let titleHeight = titleString.size().height
        let imageY = blockY + titleHeight + 20  // –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_longSkroll
        if let scrollImage = UIImage(named: "pdf_2_longSkroll") {
            let imageRect = CGRect(x: blockX, y: imageY, width: blockWidth, height: 0)
            
            // –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            let imageAspectRatio = scrollImage.size.width / scrollImage.size.height
            let scaledHeight = blockWidth / imageAspectRatio
            
            let finalImageRect = CGRect(x: blockX, y: imageY, width: blockWidth, height: scaledHeight)
            scrollImage.draw(in: finalImageRect)
            
            print("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_longSkroll –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ: \(finalImageRect)")
            
            // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É –º–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            var currentY = imageY + scaledHeight + 30  // –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
            drawWorkExperiences(formData: formData, in: context, startY: currentY, blockX: blockX, blockWidth: blockWidth)
            
        } else {
            print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_longSkroll –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            let currentY = imageY + 30
            drawWorkExperiences(formData: formData, in: context, startY: currentY, blockX: blockX, blockWidth: blockWidth)
        }
        
        print("üíº –ë–ª–æ–∫ Experience –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω: \(blockRect)")
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã –≤ –±–ª–æ–∫–µ Experience
     */
    private func drawWorkExperiences(formData: SurveyFormData, in context: CGContext, startY: CGFloat, blockX: CGFloat, blockWidth: CGFloat) {
        var currentY = startY
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤
        guard let positionFont = UIFont(name: "Figtree-Medium", size: 50),
              let dateFont = UIFont(name: "Figtree-SemiBold", size: 40),
              let companyFont = UIFont(name: "Figtree-Medium", size: 40),
              let responsibilitiesFont = UIFont(name: "Figtree-Regular", size: 36) else {
            print("‚ùå –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        }
        
        let positionAttributes: [NSAttributedString.Key: Any] = [
            .font: positionFont,
            .foregroundColor: UIColor.black
        ]
        
        let dateAttributes: [NSAttributedString.Key: Any] = [
            .font: dateFont,
            .foregroundColor: UIColor(named: "PDFpediodColor") ?? UIColor.gray
        ]
        
        let companyAttributes: [NSAttributedString.Key: Any] = [
            .font: companyFont,
            .foregroundColor: UIColor.black
        ]
        
        let responsibilitiesAttributes: [NSAttributedString.Key: Any] = [
            .font: responsibilitiesFont,
            .foregroundColor: UIColor.black
        ]
        
        for (index, work) in formData.works.enumerated() {
            // –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ 447)
            let positionMaxWidth: CGFloat = 447
            let positionString = NSAttributedString(string: work.position.uppercased(), attributes: positionAttributes)
            let positionRect = CGRect(x: blockX, y: currentY, width: positionMaxWidth, height: CGFloat.greatestFiniteMagnitude)
            let positionBoundingRect = positionString.boundingRect(with: CGSize(width: positionMaxWidth, height: CGFloat.greatestFiniteMagnitude),
                                                                  options: [.usesLineFragmentOrigin, .usesFontLeading],
                                                                  context: nil)
            positionString.draw(in: positionRect)
            
            // –î–∞—Ç—ã –ø–æ–¥ –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é
            let dateText = work.isCurentlyWork ?
                "\(work.whenStart) - Present" :
                "\(work.whenStart) - \(work.whenFinished)"
            let dateString = NSAttributedString(string: dateText, attributes: dateAttributes)
            let dateY = currentY + positionBoundingRect.height + 5
            dateString.draw(at: CGPoint(x: blockX, y: dateY))
            
            // –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            let companyX = blockX + positionMaxWidth + 100  // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏
            let companyString = NSAttributedString(string: work.companyName, attributes: companyAttributes)
            companyString.draw(at: CGPoint(x: companyX, y: currentY))
            
            // Responsibilities –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
            let responsibilitiesY = currentY + companyString.size().height + 15
            let responsibilitiesMaxWidth = blockWidth - (companyX - blockX) - 50  // –û—Å—Ç–∞–≤—à–∞—è—Å—è —à–∏—Ä–∏–Ω–∞
            
            print("üìç –†–∞–±–æ—Ç–∞ \(index + 1) (\(work.companyName)):")
            print("   currentY: \(currentY)")
            print("   companyX: \(companyX)")
            print("   companyString.size().height: \(companyString.size().height)")
            print("   responsibilitiesY: \(responsibilitiesY)")
            print("   responsibilitiesMaxWidth: \(responsibilitiesMaxWidth)")
            
            if !work.responsibilities.trimmingCharacters(in: .whitespaces).isEmpty {
                print("üíº PDF_2: –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º responsibilities –¥–ª—è \(work.companyName): '\(work.responsibilities)'")
                let responsibilitiesString = NSAttributedString(string: work.responsibilities, attributes: responsibilitiesAttributes)
                let responsibilitiesRect = CGRect(x: companyX, y: responsibilitiesY, width: responsibilitiesMaxWidth, height: CGFloat.greatestFiniteMagnitude)
                print("   responsibilitiesRect: \(responsibilitiesRect)")
                let responsibilitiesBoundingRect = responsibilitiesString.boundingRect(with: CGSize(width: responsibilitiesMaxWidth, height: CGFloat.greatestFiniteMagnitude),
                                                                                      options: [.usesLineFragmentOrigin, .usesFontLeading],
                                                                                      context: nil)
                responsibilitiesString.draw(in: responsibilitiesRect)
                
                // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –±–ª–æ–∫–∞ —Ä–∞–±–æ—Ç—ã
                let leftColumnHeight = positionBoundingRect.height + 5 + dateString.size().height
                let rightColumnHeight = companyString.size().height + 15 + responsibilitiesBoundingRect.height
                let maxHeight = max(leftColumnHeight, rightColumnHeight)
                
                print("   leftColumnHeight: \(leftColumnHeight)")
                print("   rightColumnHeight: \(rightColumnHeight)")
                print("   maxHeight: \(maxHeight)")
                print("   –Ω–æ–≤—ã–π currentY: \(currentY + maxHeight + 50)")
                
                currentY += maxHeight + 50  // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–∞–º–∏
            } else {
                print("üíº PDF_2: –ü—É—Å—Ç—ã–µ responsibilities –¥–ª—è \(work.companyName)")
                let leftColumnHeight = positionBoundingRect.height + 5 + dateString.size().height
                let rightColumnHeight = companyString.size().height
                let maxHeight = max(leftColumnHeight, rightColumnHeight)
                
                print("   leftColumnHeight: \(leftColumnHeight)")
                print("   rightColumnHeight: \(rightColumnHeight)")
                print("   maxHeight: \(maxHeight)")
                print("   –Ω–æ–≤—ã–π currentY: \(currentY + maxHeight + 50)")
                
                currentY += maxHeight + 50
            }
            
            print("üíº –†–∞–±–æ—Ç–∞ \(index + 1): \(work.position) –≤ \(work.companyName)")
        }
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –±–ª–æ–∫ —Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
     */
    private func drawEducationBlock(formData: SurveyFormData, in context: CGContext) {
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∞ (—Ä–∞–∑–º–µ—â–∞–µ–º –Ω–∏–∂–µ –±–ª–æ–∫–∞ Experience)
        let blockX: CGFloat = 155
        let experienceBlockHeight: CGFloat = 1114 + 60 // –í—ã—Å–æ—Ç–∞ –±–ª–æ–∫–∞ Experience + –æ—Ç—Å—Ç—É–ø
        let blockY: CGFloat = topSectionHeight + experienceBlockHeight + 60  // –ù–∏–∂–µ –±–ª–æ–∫–∞ Experience —Å –æ—Ç—Å—Ç—É–ø–æ–º 60
        let blockWidth: CGFloat = 1406
        let blockHeight: CGFloat = 800  // –ú–µ–Ω—å—à–µ —á–µ–º —É Experience
        
        let blockRect = CGRect(x: blockX, y: blockY, width: blockWidth, height: blockHeight)
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ EDUCATION
        guard let titleFont = UIFont(name: "Figtree-Bold", size: 64) else {
            print("‚ùå –®—Ä–∏—Ñ—Ç Figtree-Bold –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        }
        
        let titleAttributes: [NSAttributedString.Key: Any] = [
            .font: titleFont,
            .foregroundColor: UIColor.black
        ]
        
        let titleString = NSAttributedString(string: "EDUCATION", attributes: titleAttributes)
        let titlePosition = CGPoint(x: blockX, y: blockY)
        titleString.draw(at: titlePosition)
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è pdf_2_longSkroll
        let titleHeight = titleString.size().height
        let imageY = blockY + titleHeight + 20  // –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_longSkroll
        if let scrollImage = UIImage(named: "pdf_2_longSkroll") {
            // –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            let imageAspectRatio = scrollImage.size.width / scrollImage.size.height
            let scaledHeight = blockWidth / imageAspectRatio
            
            let finalImageRect = CGRect(x: blockX, y: imageY, width: blockWidth, height: scaledHeight)
            scrollImage.draw(in: finalImageRect)
            
            print("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_longSkroll –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ: \(finalImageRect)")
            
            // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            let currentY = imageY + scaledHeight + 30  // –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
            drawEducationEntries(formData: formData, in: context, startY: currentY, blockX: blockX, blockWidth: blockWidth)
            
        } else {
            print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_longSkroll –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            let currentY = imageY + 30
            drawEducationEntries(formData: formData, in: context, startY: currentY, blockX: blockX, blockWidth: blockWidth)
        }
        
        print("üéì –ë–ª–æ–∫ Education –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω: \(blockRect)")
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –±–ª–æ–∫–µ Education
     */
    private func drawEducationEntries(formData: SurveyFormData, in context: CGContext, startY: CGFloat, blockX: CGFloat, blockWidth: CGFloat) {
        var currentY = startY
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤
        guard let schoolFont = UIFont(name: "Figtree-Medium", size: 50),
              let dateFont = UIFont(name: "Figtree-SemiBold", size: 40),
              let degreeFont = UIFont(name: "Figtree-Medium", size: 40),
              let detailsFont = UIFont(name: "Figtree-Regular", size: 36) else {
            print("‚ùå –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        }
        
        let schoolAttributes: [NSAttributedString.Key: Any] = [
            .font: schoolFont,
            .foregroundColor: UIColor.black
        ]
        
        let dateAttributes: [NSAttributedString.Key: Any] = [
            .font: dateFont,
            .foregroundColor: UIColor(named: "PDFpediodColor") ?? UIColor.gray
        ]
        
        let degreeAttributes: [NSAttributedString.Key: Any] = [
            .font: degreeFont,
            .foregroundColor: UIColor.black
        ]
        
        let detailsAttributes: [NSAttributedString.Key: Any] = [
            .font: detailsFont,
            .foregroundColor: UIColor.black
        ]
        
        for (index, education) in formData.educations.enumerated() {
            // –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ 447)
            let schoolMaxWidth: CGFloat = 447
            let schoolString = NSAttributedString(string: education.schoolName.uppercased(), attributes: schoolAttributes)
            let schoolRect = CGRect(x: blockX, y: currentY, width: schoolMaxWidth, height: CGFloat.greatestFiniteMagnitude)
            let schoolBoundingRect = schoolString.boundingRect(with: CGSize(width: schoolMaxWidth, height: CGFloat.greatestFiniteMagnitude),
                                                              options: [.usesLineFragmentOrigin, .usesFontLeading],
                                                              context: nil)
            schoolString.draw(in: schoolRect)
            
            // –î–∞—Ç—ã –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —à–∫–æ–ª—ã
            let dateText = education.isCurrentlyStudying ?
                "\(education.whenStart) - Present" :
                "\(education.whenStart) - \(education.whenFinished)"
            let dateString = NSAttributedString(string: dateText, attributes: dateAttributes)
            let dateY = currentY + schoolBoundingRect.height + 5
            dateString.draw(at: CGPoint(x: blockX, y: dateY))
            
            // –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å—Ç–µ–ø–µ–Ω—å/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
            let degreeX = blockX + schoolMaxWidth + 100  // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏
            let degreeString = NSAttributedString(string: "Bachelor's Degree", attributes: degreeAttributes)  // –ó–∞–≥–ª—É—à–∫–∞
            degreeString.draw(at: CGPoint(x: degreeX, y: currentY))
            
            // Educational Details –ø–æ–¥ —Å—Ç–µ–ø–µ–Ω—å—é
            let detailsY = currentY + degreeString.size().height + 15
            let detailsMaxWidth = blockWidth - (degreeX - blockX) - 50  // –û—Å—Ç–∞–≤—à–∞—è—Å—è —à–∏—Ä–∏–Ω–∞
            
            print("üìç –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ \(index + 1) (\(education.schoolName)):")
            print("   currentY: \(currentY)")
            print("   degreeX: \(degreeX)")
            print("   detailsY: \(detailsY)")
            print("   detailsMaxWidth: \(detailsMaxWidth)")
            
            if !education.educationalDetails.trimmingCharacters(in: .whitespaces).isEmpty {
                print("üéì PDF_2: –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º educational details –¥–ª—è \(education.schoolName): '\(education.educationalDetails)'")
                let detailsString = NSAttributedString(string: education.educationalDetails, attributes: detailsAttributes)
                let detailsRect = CGRect(x: degreeX, y: detailsY, width: detailsMaxWidth, height: CGFloat.greatestFiniteMagnitude)
                let detailsBoundingRect = detailsString.boundingRect(with: CGSize(width: detailsMaxWidth, height: CGFloat.greatestFiniteMagnitude),
                                                                    options: [.usesLineFragmentOrigin, .usesFontLeading],
                                                                    context: nil)
                detailsString.draw(in: detailsRect)
                
                // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –±–ª–æ–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                let leftColumnHeight = schoolBoundingRect.height + 5 + dateString.size().height
                let rightColumnHeight = degreeString.size().height + 15 + detailsBoundingRect.height
                let maxHeight = max(leftColumnHeight, rightColumnHeight)
                
                print("   leftColumnHeight: \(leftColumnHeight)")
                print("   rightColumnHeight: \(rightColumnHeight)")
                print("   maxHeight: \(maxHeight)")
                print("   –Ω–æ–≤—ã–π currentY: \(currentY + maxHeight + 50)")
                
                currentY += maxHeight + 50  // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏
            } else {
                print("üéì PDF_2: –ü—É—Å—Ç—ã–µ educational details –¥–ª—è \(education.schoolName)")
                let leftColumnHeight = schoolBoundingRect.height + 5 + dateString.size().height
                let rightColumnHeight = degreeString.size().height
                let maxHeight = max(leftColumnHeight, rightColumnHeight)
                
                print("   leftColumnHeight: \(leftColumnHeight)")
                print("   rightColumnHeight: \(rightColumnHeight)")
                print("   maxHeight: \(maxHeight)")
                print("   –Ω–æ–≤—ã–π currentY: \(currentY + maxHeight + 50)")
                
                currentY += maxHeight + 50
            }
            
            print("üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ \(index + 1): \(education.schoolName)")
        }
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –±–ª–æ–∫ About Me —Å–ø—Ä–∞–≤–∞
     */
    private func drawAboutMeBlock(formData: SurveyFormData, in context: CGContext) {
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∞ (—Å–ø—Ä–∞–≤–∞ —Å –æ—Ç—Å—Ç—É–ø–æ–º)
        let blockWidth: CGFloat = 624
        let blockHeight: CGFloat = 801
        let rightMargin: CGFloat = 155  // –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ —Å–ª–µ–≤–∞ —É –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤)
        let blockX: CGFloat = pageSize.width - rightMargin - blockWidth
        let blockY: CGFloat = topSectionHeight + 60  // –ù–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ —á—Ç–æ Experience
        
        let blockRect = CGRect(x: blockX, y: blockY, width: blockWidth, height: blockHeight)
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ ABOUT ME
        guard let titleFont = UIFont(name: "Figtree-Bold", size: 64) else {
            print("‚ùå –®—Ä–∏—Ñ—Ç Figtree-Bold –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        }
        
        let titleAttributes: [NSAttributedString.Key: Any] = [
            .font: titleFont,
            .foregroundColor: UIColor.black
        ]
        
        let titleString = NSAttributedString(string: "ABOUT ME", attributes: titleAttributes)
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        let titleWidth = titleString.size().width
        let titleCenterX = blockX + (blockWidth - titleWidth) / 2
        let titlePosition = CGPoint(x: titleCenterX, y: blockY)
        titleString.draw(at: titlePosition)
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è pdf_2_shortScroll
        let titleHeight = titleString.size().height
        let imageY = blockY + titleHeight + 20  // –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_shortScroll
        if let scrollImage = UIImage(named: "pdf_2_shortScroll") {
            // –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            let imageAspectRatio = scrollImage.size.width / scrollImage.size.height
            let scaledHeight = blockWidth / imageAspectRatio
            
            let finalImageRect = CGRect(x: blockX, y: imageY, width: blockWidth, height: scaledHeight)
            scrollImage.draw(in: finalImageRect)
            
            print("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_shortScroll –¥–ª—è About Me –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ: \(finalImageRect)")
            
            // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Ç–µ–∫—Å—Ç–∞ About Me –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            let textStartY = imageY + scaledHeight + 30  // –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
            drawAboutMeText(formData: formData, in: context, startY: textStartY, blockX: blockX, blockWidth: blockWidth)
            
        } else {
            print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_shortScroll –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            let textStartY = imageY + 30
            drawAboutMeText(formData: formData, in: context, startY: textStartY, blockX: blockX, blockWidth: blockWidth)
        }
        
        print("üìù –ë–ª–æ–∫ About Me –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω: \(blockRect)")
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç About Me (summary)
     */
    private func drawAboutMeText(formData: SurveyFormData, in context: CGContext, startY: CGFloat, blockX: CGFloat, blockWidth: CGFloat) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ About Me
        guard let aboutMeFont = UIFont(name: "Figtree-Regular", size: 36) else {
            print("‚ùå –®—Ä–∏—Ñ—Ç Figtree-Regular –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        }
        
        let aboutMeAttributes: [NSAttributedString.Key: Any] = [
            .font: aboutMeFont,
            .foregroundColor: UIColor.black
        ]
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç summary
        let summaryText = formData.summaryData.summaryText
        
        if !summaryText.trimmingCharacters(in: .whitespaces).isEmpty {
            print("üìù PDF_2: –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º About Me: '\(summaryText)'")
            
            let aboutMeString = NSAttributedString(string: summaryText, attributes: aboutMeAttributes)
            let textMaxWidth = blockWidth  // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –ø–æ –±–æ–∫–∞–º
            let textRect = CGRect(x: blockX, y: startY, width: textMaxWidth, height: CGFloat.greatestFiniteMagnitude)
            
            let boundingRect = aboutMeString.boundingRect(with: CGSize(width: textMaxWidth, height: CGFloat.greatestFiniteMagnitude),
                                                         options: [.usesLineFragmentOrigin, .usesFontLeading],
                                                         context: nil)
            
            aboutMeString.draw(in: textRect)
            
            print("üìù About Me —Ç–µ–∫—Å—Ç –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(textRect.minX), \(textRect.minY)) —Ä–∞–∑–º–µ—Ä–æ–º \(boundingRect.width)x\(boundingRect.height)")
        } else {
                         print("üìù PDF_2: –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç About Me")
         }
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –±–ª–æ–∫ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∏–∂–µ About Me
      */
     private func drawContactBlock(formData: SurveyFormData, in context: CGContext) {
         // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∞ (—Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ About Me, –Ω–æ –Ω–∏–∂–µ)
         let blockWidth: CGFloat = 624
         let blockHeight: CGFloat = 600  // –ú–µ–Ω—å—à–µ —á–µ–º About Me
         let rightMargin: CGFloat = 155
         let blockX: CGFloat = pageSize.width - rightMargin - blockWidth
         let aboutMeBlockHeight: CGFloat = 801 + 60  // –í—ã—Å–æ—Ç–∞ About Me + –æ—Ç—Å—Ç—É–ø
         let blockY: CGFloat = topSectionHeight + 60 + aboutMeBlockHeight  // –ù–∏–∂–µ About Me
         
         let blockRect = CGRect(x: blockX, y: blockY, width: blockWidth, height: blockHeight)
         
         // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ CONTACT
         guard let titleFont = UIFont(name: "Figtree-Bold", size: 64) else {
             print("‚ùå –®—Ä–∏—Ñ—Ç Figtree-Bold –Ω–µ –Ω–∞–π–¥–µ–Ω")
             return
         }
         
         let titleAttributes: [NSAttributedString.Key: Any] = [
             .font: titleFont,
             .foregroundColor: UIColor.black
         ]
         
         let titleString = NSAttributedString(string: "CONTACT", attributes: titleAttributes)
         // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
         let titleWidth = titleString.size().width
         let titleCenterX = blockX + (blockWidth - titleWidth) / 2
         let titlePosition = CGPoint(x: titleCenterX, y: blockY)
         titleString.draw(at: titlePosition)
         
         // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è pdf_2_shortScroll
         let titleHeight = titleString.size().height
         let imageY = blockY + titleHeight + 20  // –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
         
         // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_shortScroll
         if let scrollImage = UIImage(named: "pdf_2_shortScroll") {
             // –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
             let imageAspectRatio = scrollImage.size.width / scrollImage.size.height
             let scaledHeight = blockWidth / imageAspectRatio
             
             let finalImageRect = CGRect(x: blockX, y: imageY, width: blockWidth, height: scaledHeight)
             scrollImage.draw(in: finalImageRect)
             
             print("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_shortScroll –¥–ª—è Contact –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ: \(finalImageRect)")
             
             // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
             let contactStartY = imageY + scaledHeight + 30  // –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
             
             drawContactData(formData: formData, in: context, startY: contactStartY, blockX: blockX, blockWidth: blockWidth)
             
         } else {
             print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_shortScroll –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
             // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
             let contactStartY = imageY + 30
             drawContactData(formData: formData, in: context, startY: contactStartY, blockX: blockX, blockWidth: blockWidth)
         }
         
         print("üìû –ë–ª–æ–∫ Contact –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω: \(blockRect)")
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      */
     private func drawContactData(formData: SurveyFormData, in context: CGContext, startY: CGFloat, blockX: CGFloat, blockWidth: CGFloat) {
         var currentY = startY
         
         // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤
         guard let labelFont = UIFont(name: "Figtree-SemiBold", size: 40),
               let valueFont = UIFont(name: "Figtree-Regular", size: 36) else {
             print("‚ùå –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
             return
         }
         
         let labelAttributes: [NSAttributedString.Key: Any] = [
             .font: labelFont,
             .foregroundColor: UIColor.black
         ]
         
         let valueAttributes: [NSAttributedString.Key: Any] = [
             .font: valueFont,
             .foregroundColor: UIColor.black
         ]
         
         let leftMargin: CGFloat = 0  // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
         let spacing: CGFloat = 30  // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
         let labelValueSpacing: CGFloat = 10  // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –ª–µ–π–±–ª–æ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º
         
         // Address
         if !formData.address.trimmingCharacters(in: .whitespaces).isEmpty {
             let addressLabelString = NSAttributedString(string: "Address", attributes: labelAttributes)
             addressLabelString.draw(at: CGPoint(x: blockX + leftMargin, y: currentY))
             currentY += addressLabelString.size().height + labelValueSpacing
             
             let addressValueString = NSAttributedString(string: formData.address, attributes: valueAttributes)
             let maxWidth = blockWidth  // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
             let addressRect = CGRect(x: blockX + leftMargin, y: currentY, width: maxWidth, height: CGFloat.greatestFiniteMagnitude)
             let addressBoundingRect = addressValueString.boundingRect(with: CGSize(width: maxWidth, height: CGFloat.greatestFiniteMagnitude),
                                                                      options: [.usesLineFragmentOrigin, .usesFontLeading],
                                                                      context: nil)
             addressValueString.draw(in: addressRect)
             currentY += addressBoundingRect.height + spacing
         }
         
         // Email
         if !formData.email.trimmingCharacters(in: .whitespaces).isEmpty {
             let emailLabelString = NSAttributedString(string: "Email", attributes: labelAttributes)
             emailLabelString.draw(at: CGPoint(x: blockX + leftMargin, y: currentY))
             currentY += emailLabelString.size().height + labelValueSpacing
             
             let emailValueString = NSAttributedString(string: formData.email, attributes: valueAttributes)
             emailValueString.draw(at: CGPoint(x: blockX + leftMargin, y: currentY))
             currentY += emailValueString.size().height + spacing
         }
         
         // Phone
         if !formData.phone.trimmingCharacters(in: .whitespaces).isEmpty {
             let phoneLabelString = NSAttributedString(string: "Phone", attributes: labelAttributes)
             phoneLabelString.draw(at: CGPoint(x: blockX + leftMargin, y: currentY))
             currentY += phoneLabelString.size().height + labelValueSpacing
             
             let phoneValueString = NSAttributedString(string: formData.phone, attributes: valueAttributes)
             phoneValueString.draw(at: CGPoint(x: blockX + leftMargin, y: currentY))
             currentY += phoneValueString.size().height + spacing
         }
         
         // Website
         if !formData.website.trimmingCharacters(in: .whitespaces).isEmpty {
             let websiteLabelString = NSAttributedString(string: "Website", attributes: labelAttributes)
             websiteLabelString.draw(at: CGPoint(x: blockX + leftMargin, y: currentY))
             currentY += websiteLabelString.size().height + labelValueSpacing
             
             let websiteValueString = NSAttributedString(string: formData.website, attributes: valueAttributes)
             websiteValueString.draw(at: CGPoint(x: blockX + leftMargin, y: currentY))
             currentY += websiteValueString.size().height + spacing
         }
         
                   print("üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω—ã")
      }
      
      /**
       * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –±–ª–æ–∫ —Å–æ —Å–∫–∏–ª–ª–∞–º–∏ –Ω–∏–∂–µ Contact
       */
      private func drawSkillsBlock(formData: SurveyFormData, in context: CGContext) {
          // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∞ (—Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ –¥—Ä—É–≥–∏–µ –ø—Ä–∞–≤—ã–µ –±–ª–æ–∫–∏, –Ω–æ –Ω–∏–∂–µ Contact)
          let blockWidth: CGFloat = 624
          let blockHeight: CGFloat = 800
          let rightMargin: CGFloat = 155
          let blockX: CGFloat = pageSize.width - rightMargin - blockWidth
          let aboutMeBlockHeight: CGFloat = 801 + 60  // –í—ã—Å–æ—Ç–∞ About Me + –æ—Ç—Å—Ç—É–ø
          let contactBlockHeight: CGFloat = 600 + 60  // –í—ã—Å–æ—Ç–∞ Contact + –æ—Ç—Å—Ç—É–ø
          let blockY: CGFloat = topSectionHeight + 60 + aboutMeBlockHeight + contactBlockHeight  // –ù–∏–∂–µ Contact
          
          let blockRect = CGRect(x: blockX, y: blockY, width: blockWidth, height: blockHeight)
          
          // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ SKILLS
          guard let titleFont = UIFont(name: "Figtree-Bold", size: 64) else {
              print("‚ùå –®—Ä–∏—Ñ—Ç Figtree-Bold –Ω–µ –Ω–∞–π–¥–µ–Ω")
              return
          }
          
          let titleAttributes: [NSAttributedString.Key: Any] = [
              .font: titleFont,
              .foregroundColor: UIColor.black
          ]
          
          let titleString = NSAttributedString(string: "SKILLS", attributes: titleAttributes)
          // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
          let titleWidth = titleString.size().width
          let titleCenterX = blockX + (blockWidth - titleWidth) / 2
          let titlePosition = CGPoint(x: titleCenterX, y: blockY)
          titleString.draw(at: titlePosition)
          
          // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è pdf_2_shortScroll
          let titleHeight = titleString.size().height
          let imageY = blockY + titleHeight + 20  // –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
          
          // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_shortScroll
          if let scrollImage = UIImage(named: "pdf_2_shortScroll") {
              // –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
              let imageAspectRatio = scrollImage.size.width / scrollImage.size.height
              let scaledHeight = blockWidth / imageAspectRatio
              
              let finalImageRect = CGRect(x: blockX, y: imageY, width: blockWidth, height: scaledHeight)
              scrollImage.draw(in: finalImageRect)
              
              print("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_shortScroll –¥–ª—è Skills –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ: \(finalImageRect)")
              
              // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Å–∫–∏–ª–ª–æ–≤ –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              let skillsStartY = imageY + scaledHeight + 30  // –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              
              drawSkillsData(formData: formData, in: context, startY: skillsStartY, blockX: blockX, blockWidth: blockWidth)
              
          } else {
              print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_shortScroll –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
              // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
              let skillsStartY = imageY + 30
              drawSkillsData(formData: formData, in: context, startY: skillsStartY, blockX: blockX, blockWidth: blockWidth)
          }
          
          print("üéØ –ë–ª–æ–∫ Skills –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω: \(blockRect)")
      }
      
      /**
       * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–∫–∏–ª–ª—ã —Å —Ä–∞–º–∫–∞–º–∏ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —É—Ä–æ–≤–Ω—è
       */
      private func drawSkillsData(formData: SurveyFormData, in context: CGContext, startY: CGFloat, blockX: CGFloat, blockWidth: CGFloat) {
          var currentY = startY
          
          // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å–∫–∏–ª–ª–æ–≤
          guard let skillFont = UIFont(name: "Figtree-Medium", size: 36) else {
              print("‚ùå –®—Ä–∏—Ñ—Ç Figtree-Medium –Ω–µ –Ω–∞–π–¥–µ–Ω")
              return
          }
          
          let skillAttributes: [NSAttributedString.Key: Any] = [
              .font: skillFont,
              .foregroundColor: UIColor.black
          ]
          
          let leftMargin: CGFloat = 0  // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
          let skillBoxWidth: CGFloat = 278  // –®–∏—Ä–∏–Ω–∞ —Ä–∞–º–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
          let skillLevelWidth: CGFloat = 346  // –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
          let skillLevelHeight: CGFloat = 20  // –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
          let skillSpacing: CGFloat = 30  // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å–∫–∏–ª–ª–∞–º–∏
          let boxPadding: CGFloat = 15  // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –≤ —Ä–∞–º–∫–µ
          
          // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫–∏–ª–ª—ã
          let selectedHardSkills = formData.additionalSkills.hardSkills.filter { $0.active }.map { $0.name }
          let selectedSoftSkills = formData.additionalSkills.softSkills.filter { $0.active }.map { $0.name }
          let allSelectedSkills = selectedHardSkills + selectedSoftSkills
          
          for skill in allSelectedSkills {
              // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ —Å–∫–∏–ª–ª–∞
              let skillString = NSAttributedString(string: skill, attributes: skillAttributes)
              let textMaxWidth = skillBoxWidth
              let textBoundingRect = skillString.boundingRect(with: CGSize(width: textMaxWidth, height: CGFloat.greatestFiniteMagnitude),
                                                             options: [.usesLineFragmentOrigin, .usesFontLeading],
                                                             context: nil)
              
              // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å–∫–∏–ª–ª–∞
              let textRect = CGRect(x: blockX + leftMargin, 
                                   y: currentY, 
                                   width: textMaxWidth, 
                                   height: textBoundingRect.height)
              skillString.draw(in: textRect)
              
              // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∫–∏–ª–ª–∞ —Å–ø—Ä–∞–≤–∞
              let skillLevelX = blockX + blockWidth - skillLevelWidth
              let skillLevelY = currentY + (textBoundingRect.height - skillLevelHeight) / 2  // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç–∞
              
              if let skillLevelImage = UIImage(named: "pdf_2_skillLevel") {
                  let skillLevelRect = CGRect(x: skillLevelX, y: skillLevelY, width: skillLevelWidth, height: skillLevelHeight)
                  skillLevelImage.draw(in: skillLevelRect)
                  print("üéØ Skill level –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ –¥–ª—è '\(skill)': \(skillLevelRect)")
              } else {
                  // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, —Ä–∏—Å—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                  let skillLevelRect = CGRect(x: skillLevelX, y: skillLevelY, width: skillLevelWidth, height: skillLevelHeight)
                  context.setFillColor(UIColor.lightGray.cgColor)
                  context.fill(skillLevelRect)
                  print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_2_skillLevel –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞")
              }
              
              // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∫–∏–ª–ª—É
              currentY += textBoundingRect.height + skillSpacing
              
              print("üéØ –°–∫–∏–ª–ª '\(skill)' –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω")
          }
          
          if allSelectedSkills.isEmpty {
              let noSkillsString = NSAttributedString(string: "No skills selected", attributes: skillAttributes)
              noSkillsString.draw(at: CGPoint(x: blockX + leftMargin, y: currentY))
          }
          
          print("üéØ –í—Å–µ —Å–∫–∏–ª–ª—ã –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω—ã")
      }
}
