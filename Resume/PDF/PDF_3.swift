//
//  PDF_3.swift
//  Resume
//
//  Created by –ê–ª–∫–µ–∫—Å–∞–Ω–¥—Ä –°—Ç–µ–ø–∞–Ω–æ–≤ on 15.09.2025.
//

import SwiftUI
import PDFKit
import UIKit

// MARK: - PDF_3 Generator Class
class PDF_3_Generator: ObservableObject {
    
    // MARK: - Page Configuration
    private let pageSize = CGSize(width: 2480, height: 3508)
    
    // MARK: - Font Configuration
    private struct FontConfig {
        static let titleFont = UIFont(name: "Figtree-Bold", size: 80) ?? UIFont.boldSystemFont(ofSize: 80)
        static let sectionTitleFont = UIFont(name: "Figtree-Bold", size: 64) ?? UIFont.boldSystemFont(ofSize: 64)
        static let nameFont = UIFont(name: "Figtree-ExtraBold", size: 120) ?? UIFont.boldSystemFont(ofSize: 120)
        static let contentFont = UIFont(name: "Figtree-Medium", size: 40) ?? UIFont.systemFont(ofSize: 40)
        static let smallFont = UIFont(name: "Figtree-Regular", size: 36) ?? UIFont.systemFont(ofSize: 36)
    }
    
    // MARK: - Color Configuration
    private struct ColorConfig {
        static let primaryColor = UIColor.black
        static let secondaryColor = UIColor.gray
        static let accentColor = UIColor(named: "PDFpediodColor") ?? UIColor.blue
    }
    
    // MARK: - Layout Configuration
    private struct LayoutConfig {
        static let margin: CGFloat = 100
        static let sectionSpacing: CGFloat = 80
        static let itemSpacing: CGFloat = 40
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
     * @param formData - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã
     * @param userPhoto - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * @return Data? - –≥–æ—Ç–æ–≤—ã–π PDF –≤ –≤–∏–¥–µ –¥–∞–Ω–Ω—ã—Ö
     */
    func generatePDF(formData: SurveyFormData, userPhoto: UIImage? = nil) -> Data? {
        // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
        let documentInfo = [
            kCGPDFContextTitle: "\(formData.name) \(formData.surname) - Resume",
            kCGPDFContextAuthor: "\(formData.name) \(formData.surname)",
            kCGPDFContextSubject: "Professional Resume",
            kCGPDFContextCreator: "Resume App"
        ]
        
        // –°–æ–∑–¥–∞–µ–º PDF renderer
        let format = UIGraphicsPDFRendererFormat()
        let renderer = UIGraphicsPDFRenderer(bounds: CGRect(origin: .zero, size: pageSize), format: format)
        
        let pdfData = renderer.pdfData { context in
            // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            context.beginPage()
            let cgContext = context.cgContext
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            drawUserPhoto(userPhoto: userPhoto, in: cgContext)
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
            drawInfoBlock(formData: formData, in: cgContext)
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–ª–æ–∫ Experience
            let experienceEndY = drawExperienceBlock(formData: formData, in: cgContext)
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–ª–æ–∫ Education —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ Experience
            let educationEndY = drawEducationBlock(formData: formData, startY: experienceEndY + 60, in: cgContext)
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–ª–æ–∫ Skills —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ Education
            drawSkillsBlock(formData: formData, startY: educationEndY + 60, in: cgContext)
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
            drawDecorativeImages(in: cgContext)
            
            print("üéØ PDF_3 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        }
        
        return pdfData
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ placeholder
     */
    private func drawUserPhoto(userPhoto: UIImage?, in context: CGContext) {
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ñ–æ—Ç–æ
        let photoWidth: CGFloat = 707
        let photoHeight: CGFloat = 1059
        let leftMargin: CGFloat = 310
        let topMargin: CGFloat = 291
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
        let photoRect = CGRect(
            x: leftMargin,
            y: topMargin,
            width: photoWidth,
            height: photoHeight
        )
        
        if let photo = userPhoto {
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            drawScaledPhoto(photo: photo, in: photoRect, context: context)
            print("üì∏ PDF_3: –§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(leftMargin), \(topMargin))")
        } else {
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º placeholder
            drawPhotoPlaceholder(in: photoRect, context: context)
            print("üñºÔ∏è PDF_3: Placeholder 'No Photo' –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(leftMargin), \(topMargin))")
        }
        
        // –†–∏—Å—É–µ–º —á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ñ–æ—Ç–æ
        drawBlackRectangle(nextTo: photoRect, context: context)
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private func drawScaledPhoto(photo: UIImage, in rect: CGRect, context: CGContext) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.saveGState()
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –æ–±—Ä–µ–∑–∫–∏ –ø–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫—É
        let clipPath = UIBezierPath(rect: rect)
        context.addPath(clipPath.cgPath)
        context.clip()
        
        // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π (scaledToFill)
        let imageSize = photo.size
        let scaleX = rect.width / imageSize.width
        let scaleY = rect.height / imageSize.height
        let scale = max(scaleX, scaleY) // –ë–µ—Ä–µ–º –±–æ–ª—å—à–∏–π –º–∞—Å—à—Ç–∞–± –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let scaledWidth = imageSize.width * scale
        let scaledHeight = imageSize.height * scale
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ
        let drawX = rect.minX + (rect.width - scaledWidth) / 2
        let drawY = rect.minY + (rect.height - scaledHeight) / 2
        
        let drawRect = CGRect(x: drawX, y: drawY, width: scaledWidth, height: scaledHeight)
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo.draw(in: drawRect)
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.restoreGState()
        
        print("üì∏ –§–æ—Ç–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ–±—Ä–µ–∑–∞–Ω–æ: –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä \(imageSize), –∏—Ç–æ–≥–æ–≤—ã–π \(drawRect)")
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç placeholder "No Photo"
     */
    private func drawPhotoPlaceholder(in rect: CGRect, context: CGContext) {
        // –ó–∞–ª–∏–≤–∞–µ–º —Å–µ—Ä—ã–º —Ü–≤–µ—Ç–æ–º
        context.setFillColor(UIColor.lightGray.cgColor)
        context.fill(rect)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç "No Photo"
        let placeholderText = "No Photo"
        let textAttributes: [NSAttributedString.Key: Any] = [
            .font: FontConfig.titleFont,
            .foregroundColor: UIColor.darkGray
        ]
        
        let attributedString = NSAttributedString(string: placeholderText, attributes: textAttributes)
        let textSize = attributedString.size()
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ
        let textX = rect.minX + (rect.width - textSize.width) / 2
        let textY = rect.minY + (rect.height - textSize.height) / 2
        let textPosition = CGPoint(x: textX, y: textY)
        
        attributedString.draw(at: textPosition)
        
        print("üñºÔ∏è Placeholder 'No Photo' –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω –≤ —Ü–µ–Ω—Ç—Ä–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞")
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ñ–æ—Ç–æ
     */
    private func drawBlackRectangle(nextTo photoRect: CGRect, context: CGContext) {
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        let rectangleWidth: CGFloat = 22
        let rectangleHeight = photoRect.height // –í—ã—Å–æ—Ç–∞ –∫–∞–∫ —É —Ñ–æ—Ç–æ
        
        // –ü–æ–∑–∏—Ü–∏—è: –≤–ø–ª–æ—Ç–Ω—É—é —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ñ–æ—Ç–æ
        let rectangleX = photoRect.maxX // –ü—Ä–∞–≤—ã–π –∫—Ä–∞–π —Ñ–æ—Ç–æ
        let rectangleY = photoRect.minY // –¢–æ—Ç –∂–µ Y —á—Ç–æ –∏ —É —Ñ–æ—Ç–æ
        
        let blackRect = CGRect(
            x: rectangleX,
            y: rectangleY,
            width: rectangleWidth,
            height: rectangleHeight
        )
        
        // –ó–∞–ª–∏–≤–∞–µ–º —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        context.setFillColor(UIColor.black.cgColor)
        context.fill(blackRect)
        
        print("‚¨õ –ß–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω: (\(rectangleX), \(rectangleY)), —Ä–∞–∑–º–µ—Ä \(rectangleWidth)x\(rectangleHeight)")
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ —Å –∏–º–µ–Ω–µ–º, –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é –∏ summary
     */
    private func drawInfoBlock(formData: SurveyFormData, in context: CGContext) {
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∞
        let blockWidth: CGFloat = 892
        let blockHeight: CGFloat = 1937
        let leftMargin: CGFloat = 162
        let bottomMargin: CGFloat = 74
        
        // –ü–æ–∑–∏—Ü–∏—è –±–ª–æ–∫–∞ (–æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ Y —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç –Ω–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        let blockX = leftMargin
        let blockY = pageSize.height - bottomMargin - blockHeight
        
        let blockRect = CGRect(
            x: blockX,
            y: blockY,
            width: blockWidth,
            height: blockHeight
        )
        
        print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫: (\(blockX), \(blockY)), —Ä–∞–∑–º–µ—Ä \(blockWidth)x\(blockHeight)")
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞
        var currentY = blockY
        
        // 1. –ò–º—è (I'M NAME SURNAME)
        currentY = drawNameSection(formData: formData, startX: blockX, startY: currentY, blockWidth: blockWidth, in: context)
        
        // 2. –î–æ–ª–∂–Ω–æ—Å—Ç—å
        currentY = drawPositionSection(formData: formData, startX: blockX, startY: currentY, blockWidth: blockWidth, in: context)
        
        // 3. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        currentY = drawHorizontalImage(startX: blockX, startY: currentY, in: context)
        
                // 4. Summary
        currentY = drawSummarySection(formData: formData, startX: blockX, startY: currentY, blockWidth: blockWidth, in: context)
        
        // 5. Contact
        drawContactSection(formData: formData, startX: blockX, startY: currentY, blockWidth: blockWidth, in: context)
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º (I'M NAME SURNAME)
     */
    private func drawNameSection(formData: SurveyFormData, startX: CGFloat, startY: CGFloat, blockWidth: CGFloat, in context: CGContext) -> CGFloat {
        // –®—Ä–∏—Ñ—Ç Ruda-ExtraBold 220
        let nameFont = UIFont(name: "Ruda-ExtraBold", size: 220) ?? UIFont.boldSystemFont(ofSize: 220)
        
        // –¶–≤–µ—Ç PDF_2_Color (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ —Å–∏–Ω–∏–π —Ü–≤–µ—Ç –∏–∑ ColorConfig)
        let nameColor = UIColor(named: "PDF_2_Color") ?? UIColor.blue
        
        let nameAttributes: [NSAttributedString.Key: Any] = [
            .font: nameFont,
            .foregroundColor: nameColor
        ]
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        let nameText = "I'M\n\(formData.name.uppercased())\n\(formData.surname.uppercased())"
        let nameString = NSAttributedString(string: nameText, attributes: nameAttributes)
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
        let textSize = nameString.boundingRect(
            with: CGSize(width: blockWidth, height: CGFloat.greatestFiniteMagnitude),
            options: [.usesLineFragmentOrigin, .usesFontLeading],
            context: nil
        )
        
        // –ü–æ–∑–∏—Ü–∏—è: –ø—Ä–∏–∂–∞—Ç –∫ –ª–µ–≤–æ–º—É –≤–µ—Ä—Ö–Ω–µ–º—É –∫—Ä–∞—é –±–ª–æ–∫–∞
        let textRect = CGRect(x: startX, y: startY, width: blockWidth, height: textSize.height)
        nameString.draw(in: textRect)
        
        print("üë§ –ò–º—è –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ: '\(nameText)' –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(startX), \(startY))")
        
        return startY + textSize.height + 40 // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é
     */
    private func drawPositionSection(formData: SurveyFormData, startX: CGFloat, startY: CGFloat, blockWidth: CGFloat, in context: CGContext) -> CGFloat {
        // –®—Ä–∏—Ñ—Ç Ruda-ExtraBold 100
        let positionFont = UIFont(name: "Ruda-ExtraBold", size: 100) ?? UIFont.boldSystemFont(ofSize: 100)
        
        let positionAttributes: [NSAttributedString.Key: Any] = [
            .font: positionFont,
            .foregroundColor: UIColor.black
        ]
        
        // –ë–µ—Ä–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ –ø–µ—Ä–≤–æ–π —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder
        let positionText = formData.works.first?.position.uppercased() ?? "POSITION"
        let positionString = NSAttributedString(string: positionText, attributes: positionAttributes)
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫
        let textRect = CGRect(x: startX, y: startY, width: blockWidth, height: CGFloat.greatestFiniteMagnitude)
        let boundingRect = positionString.boundingRect(
            with: CGSize(width: blockWidth, height: CGFloat.greatestFiniteMagnitude),
            options: [.usesLineFragmentOrigin, .usesFontLeading],
            context: nil
        )
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º
        let drawRect = CGRect(x: startX, y: startY, width: blockWidth, height: boundingRect.height)
        positionString.draw(in: drawRect)
        
        print("üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞: '\(positionText)' –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(startX), \(startY)), —Ä–∞–∑–º–µ—Ä \(blockWidth)x\(boundingRect.height)")
        
        return startY + boundingRect.height + 40 // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     */
    private func drawHorizontalImage(startX: CGFloat, startY: CGFloat, in context: CGContext) -> CGFloat {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_3_3blackRectHorizontal
        guard let image = UIImage(named: "pdf_3_3blackRectHorizontal") else {
            print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_3_3blackRectHorizontal –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            // –†–∏—Å—É–µ–º —á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∫–∞–∫ fallback
            let rect = CGRect(x: startX, y: startY, width: 301, height: 28)
            context.setFillColor(UIColor.black.cgColor)
            context.fill(rect)
            print("‚¨õ Fallback: —á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ 301x28 –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(startX), \(startY))")
            return startY + 28 + 40
        }
        
        // –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 301x28
        let imageRect = CGRect(x: startX, y: startY, width: 301, height: 28)
        image.draw(in: imageRect)
        
        print("üñºÔ∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(startX), \(startY))")
        
        return startY + 28 + 40 // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–µ–∫—Ü–∏—é Summary
     */
    private func drawSummarySection(formData: SurveyFormData, startX: CGFloat, startY: CGFloat, blockWidth: CGFloat, in context: CGContext) -> CGFloat {
        // –®—Ä–∏—Ñ—Ç Figtree-Regular 36
        let summaryFont = UIFont(name: "Figtree-Regular", size: 36) ?? UIFont.systemFont(ofSize: 36)
        
        let summaryAttributes: [NSAttributedString.Key: Any] = [
            .font: summaryFont,
            .foregroundColor: UIColor.black
        ]
        
        let summaryText = formData.summaryData.summaryText.isEmpty ? 
            "Summary text will appear here when provided." : 
            formData.summaryData.summaryText
        
        let summaryString = NSAttributedString(string: summaryText, attributes: summaryAttributes)
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫
        let textRect = CGRect(x: startX, y: startY, width: blockWidth, height: CGFloat.greatestFiniteMagnitude)
        let boundingRect = summaryString.boundingRect(
            with: CGSize(width: blockWidth, height: CGFloat.greatestFiniteMagnitude),
            options: [.usesLineFragmentOrigin, .usesFontLeading],
            context: nil
        )
        
        let drawRect = CGRect(x: startX, y: startY, width: blockWidth, height: boundingRect.height)
        summaryString.draw(in: drawRect)
        
        print("üìù Summary –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(startX), \(startY)), —Ä–∞–∑–º–µ—Ä \(blockWidth)x\(boundingRect.height)")
        
        return startY + boundingRect.height + 40 // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–µ–∫—Ü–∏—é Contact
     */
    private func drawContactSection(formData: SurveyFormData, startX: CGFloat, startY: CGFloat, blockWidth: CGFloat, in context: CGContext) {
        var currentY = startY
        
        // 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ CONTACT
        let contactTitleFont = UIFont(name: "Ruda-ExtraBold", size: 80) ?? UIFont.boldSystemFont(ofSize: 80)
        let contactTitleAttributes: [NSAttributedString.Key: Any] = [
            .font: contactTitleFont,
            .foregroundColor: UIColor.black
        ]
        
        let contactTitleString = NSAttributedString(string: "CONTACT", attributes: contactTitleAttributes)
        let titleSize = contactTitleString.size()
        
        contactTitleString.draw(at: CGPoint(x: startX, y: currentY))
        currentY += titleSize.height + 40
        
        print("üìû –ó–∞–≥–æ–ª–æ–≤–æ–∫ CONTACT –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(startX), \(startY))")
        
        // 2. –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        currentY = drawContactInfo(formData: formData, startX: startX, startY: currentY, in: context)
        
        // 3. –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
        drawSocialIcons(startX: startX, startY: currentY, in: context)
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
     */
    private func drawContactInfo(formData: SurveyFormData, startX: CGFloat, startY: CGFloat, in context: CGContext) -> CGFloat {
        var currentY = startY
        
        let contactFont = UIFont(name: "Figtree-Medium", size: 36) ?? UIFont.systemFont(ofSize: 36, weight: .medium)
        let contactAttributes: [NSAttributedString.Key: Any] = [
            .font: contactFont,
            .foregroundColor: UIColor.black
        ]
        
        // –ê–¥—Ä–µ—Å
        if !formData.address.isEmpty {
            let addressString = NSAttributedString(string: formData.address, attributes: contactAttributes)
            addressString.draw(at: CGPoint(x: startX, y: currentY))
            currentY += addressString.size().height + 15
            print("üè† –ê–¥—Ä–µ—Å: \(formData.address)")
        }
        
        // –ü–æ—á—Ç–∞
        if !formData.email.isEmpty {
            let emailString = NSAttributedString(string: formData.email, attributes: contactAttributes)
            emailString.draw(at: CGPoint(x: startX, y: currentY))
            currentY += emailString.size().height + 15
            print("üìß Email: \(formData.email)")
        }
        
        // –¢–µ–ª–µ—Ñ–æ–Ω
        if !formData.phone.isEmpty {
            let phoneString = NSAttributedString(string: formData.phone, attributes: contactAttributes)
            phoneString.draw(at: CGPoint(x: startX, y: currentY))
            currentY += phoneString.size().height + 15
            print("üì± –¢–µ–ª–µ—Ñ–æ–Ω: \(formData.phone)")
        }
        
        return currentY + 40 // –û—Ç—Å—Ç—É–ø –¥–ª—è –∏–∫–æ–Ω–æ–∫
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
     */
    private func drawSocialIcons(startX: CGFloat, startY: CGFloat, in context: CGContext) {
        let iconSize: CGFloat = 73
        let iconSpacing: CGFloat = 115
        let iconNames = ["fbLogo", "instLogo", "inLogo"]
        
        for (index, iconName) in iconNames.enumerated() {
            let iconX = startX + CGFloat(index) * (iconSize + iconSpacing)
            let iconRect = CGRect(x: iconX, y: startY, width: iconSize, height: iconSize)
            
            if let icon = UIImage(named: iconName) {
                icon.draw(in: iconRect)
                print("üì± –ò–∫–æ–Ω–∫–∞ \(iconName) –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(iconX), \(startY))")
            } else {
                // Fallback: —Å–µ—Ä—ã–π –∫–≤–∞–¥—Ä–∞—Ç —Å –±—É–∫–≤–æ–π
                context.setFillColor(UIColor.lightGray.cgColor)
                context.fill(iconRect)
                
                let fallbackFont = UIFont.systemFont(ofSize: 24, weight: .bold)
                let fallbackAttributes: [NSAttributedString.Key: Any] = [
                    .font: fallbackFont,
                    .foregroundColor: UIColor.darkGray
                ]
                
                let fallbackText = String(iconName.prefix(2)).uppercased()
                let fallbackString = NSAttributedString(string: fallbackText, attributes: fallbackAttributes)
                let textSize = fallbackString.size()
                
                let textX = iconX + (iconSize - textSize.width) / 2
                let textY = startY + (iconSize - textSize.height) / 2
                fallbackString.draw(at: CGPoint(x: textX, y: textY))
                
                print("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ \(iconName) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω fallback –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(iconX), \(startY))")
            }
                 }
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –±–ª–æ–∫ Experience
      */
     private func drawExperienceBlock(formData: SurveyFormData, in context: CGContext) -> CGFloat {
         // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∞ Experience
         let blockWidth: CGFloat = 1093
         let blockHeight: CGFloat = 1096
         let rightMargin: CGFloat = 174
         let topMargin: CGFloat = 174
         
         // –ü–æ–∑–∏—Ü–∏—è –±–ª–æ–∫–∞ (—Å–ø—Ä–∞–≤–∞ –∏ —Å–≤–µ—Ä—Ö—É)
         let blockX = pageSize.width - rightMargin - blockWidth
         let blockY = topMargin
         
         let blockRect = CGRect(
             x: blockX,
             y: blockY,
             width: blockWidth,
             height: blockHeight
         )
         
         print("üíº –ë–ª–æ–∫ Experience: (\(blockX), \(blockY)), —Ä–∞–∑–º–µ—Ä \(blockWidth)x\(blockHeight)")
         
         var currentY = blockY
         
         // 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ WORK EXPERIENCE
         currentY = drawExperienceTitle(startX: blockX, startY: currentY, in: context)
         
         // 2. –ú–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã
         let finalY = drawWorkExperiences(formData: formData, startX: blockX, startY: currentY, blockWidth: blockWidth, in: context)
         
         return finalY
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ WORK EXPERIENCE
      */
     private func drawExperienceTitle(startX: CGFloat, startY: CGFloat, in context: CGContext) -> CGFloat {
         let titleFont = UIFont(name: "Ruda-ExtraBold", size: 80) ?? UIFont.boldSystemFont(ofSize: 80)
         let titleAttributes: [NSAttributedString.Key: Any] = [
             .font: titleFont,
             .foregroundColor: UIColor.black
         ]
         
         let titleString = NSAttributedString(string: "WORK EXPERIENCE", attributes: titleAttributes)
         let titleSize = titleString.size()
         
         titleString.draw(at: CGPoint(x: startX, y: startY))
         
         print("üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ WORK EXPERIENCE –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(startX), \(startY))")
         
         return startY + titleSize.height + 40 // –û—Ç—Å—Ç—É–ø –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≤—Å–µ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã
      */
     private func drawWorkExperiences(formData: SurveyFormData, startX: CGFloat, startY: CGFloat, blockWidth: CGFloat, in context: CGContext) -> CGFloat {
         var currentY = startY
         
         for (index, work) in formData.works.enumerated() {
             currentY = drawSingleWorkExperience(
                 work: work,
                 startX: startX,
                 startY: currentY,
                 blockWidth: blockWidth,
                 in: context
             )
             
             // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –º–µ—Å—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
             if index < formData.works.count - 1 {
                 currentY += 60
             }
         }
         
         print("üíº –û—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ \(formData.works.count) –º–µ—Å—Ç —Ä–∞–±–æ—Ç—ã")
         
         return currentY
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
      */
     private func drawSingleWorkExperience(work: WorkData, startX: CGFloat, startY: CGFloat, blockWidth: CGFloat, in context: CGContext) -> CGFloat {
         var currentY = startY
         
         // 1. –°—Ç—Ä–µ–ª–∫–∞ arrowDown
         let arrowX = startX
         let arrowY = currentY
         let arrowSize = CGSize(width: 48, height: 40)
         
         if let arrowImage = UIImage(named: "arrowDown") {
             let arrowRect = CGRect(x: arrowX, y: arrowY, width: arrowSize.width, height: arrowSize.height)
             arrowImage.draw(in: arrowRect)
             print("‚¨áÔ∏è –°—Ç—Ä–µ–ª–∫–∞ arrowDown –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(arrowX), \(arrowY))")
         } else {
             // Fallback: —á–µ—Ä–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞
             context.setFillColor(UIColor.black.cgColor)
             let arrowRect = CGRect(x: arrowX, y: arrowY, width: arrowSize.width, height: arrowSize.height)
             context.fill(arrowRect)
             print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ arrowDown –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω fallback")
         }
         
         // 2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–ø—Ä–∞–≤–∞ –æ—Ç —Å—Ç—Ä–µ–ª–∫–∏
         let textStartX = arrowX + arrowSize.width + 20 // –û—Ç—Å—Ç—É–ø –æ—Ç —Å—Ç—Ä–µ–ª–∫–∏
         let textWidth = blockWidth - (textStartX - startX)
         
         var textY = currentY
         
         // –î–æ–ª–∂–Ω–æ—Å—Ç—å
         textY = drawWorkPosition(work: work, startX: textStartX, startY: textY, maxWidth: textWidth, in: context)
         
         // –î–∞—Ç—ã
         textY = drawWorkDates(work: work, startX: textStartX, startY: textY, maxWidth: textWidth, in: context)
         
         // –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã
         textY = drawWorkCompany(work: work, startX: textStartX, startY: textY, maxWidth: textWidth, in: context)
         
         // Responsibilities
         textY = drawWorkResponsibilities(work: work, startX: textStartX, startY: textY, maxWidth: textWidth, in: context)
         
         // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É (–ª–∏–±–æ —Å—Ç—Ä–µ–ª–∫–∞, –ª–∏–±–æ —Ç–µ–∫—Å—Ç)
         let arrowBottom = arrowY + arrowSize.height
         return max(arrowBottom, textY)
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å
      */
     private func drawWorkPosition(work: WorkData, startX: CGFloat, startY: CGFloat, maxWidth: CGFloat, in context: CGContext) -> CGFloat {
         let positionFont = UIFont(name: "Ruda-ExtraBold", size: 50) ?? UIFont.boldSystemFont(ofSize: 50)
         let positionAttributes: [NSAttributedString.Key: Any] = [
             .font: positionFont,
             .foregroundColor: UIColor.black
         ]
         
         let positionString = NSAttributedString(string: work.position, attributes: positionAttributes)
         let boundingRect = positionString.boundingRect(
             with: CGSize(width: maxWidth, height: CGFloat.greatestFiniteMagnitude),
             options: [.usesLineFragmentOrigin, .usesFontLeading],
             context: nil
         )
         
         let drawRect = CGRect(x: startX, y: startY, width: maxWidth, height: boundingRect.height)
         positionString.draw(in: drawRect)
         
         print("üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: \(work.position)")
         
         return startY + boundingRect.height + 10
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –¥–∞—Ç—ã —Ä–∞–±–æ—Ç—ã
      */
     private func drawWorkDates(work: WorkData, startX: CGFloat, startY: CGFloat, maxWidth: CGFloat, in context: CGContext) -> CGFloat {
         let dateFont = UIFont(name: "Ruda-ExtraBold", size: 50) ?? UIFont.boldSystemFont(ofSize: 50)
         let dateAttributes: [NSAttributedString.Key: Any] = [
             .font: dateFont,
             .foregroundColor: UIColor.black
         ]
         
         let dateText = work.isCurentlyWork ? 
             "[\(work.whenStart) - Present]" : 
             "[\(work.whenStart) - \(work.whenFinished)]"
         
         let dateString = NSAttributedString(string: dateText, attributes: dateAttributes)
         let boundingRect = dateString.boundingRect(
             with: CGSize(width: maxWidth, height: CGFloat.greatestFiniteMagnitude),
             options: [.usesLineFragmentOrigin, .usesFontLeading],
             context: nil
         )
         
         let drawRect = CGRect(x: startX, y: startY, width: maxWidth, height: boundingRect.height)
         dateString.draw(in: drawRect)
         
         print("üìÖ –î–∞—Ç—ã: \(dateText)")
         
         return startY + boundingRect.height + 10
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
      */
     private func drawWorkCompany(work: WorkData, startX: CGFloat, startY: CGFloat, maxWidth: CGFloat, in context: CGContext) -> CGFloat {
         let companyFont = UIFont(name: "Figtree-Medium", size: 40) ?? UIFont.systemFont(ofSize: 40, weight: .medium)
         let companyAttributes: [NSAttributedString.Key: Any] = [
             .font: companyFont,
             .foregroundColor: UIColor.black
         ]
         
         let companyString = NSAttributedString(string: work.companyName, attributes: companyAttributes)
         let boundingRect = companyString.boundingRect(
             with: CGSize(width: maxWidth, height: CGFloat.greatestFiniteMagnitude),
             options: [.usesLineFragmentOrigin, .usesFontLeading],
             context: nil
         )
         
         let drawRect = CGRect(x: startX, y: startY, width: maxWidth, height: boundingRect.height)
         companyString.draw(in: drawRect)
         
         print("üè¢ –ö–æ–º–ø–∞–Ω–∏—è: \(work.companyName)")
         
         return startY + boundingRect.height + 10
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
      */
     private func drawWorkResponsibilities(work: WorkData, startX: CGFloat, startY: CGFloat, maxWidth: CGFloat, in context: CGContext) -> CGFloat {
         guard !work.responsibilities.isEmpty else {
             return startY
         }
         
         let responsibilitiesFont = UIFont(name: "Figtree-Regular", size: 36) ?? UIFont.systemFont(ofSize: 36)
         let responsibilitiesAttributes: [NSAttributedString.Key: Any] = [
             .font: responsibilitiesFont,
             .foregroundColor: UIColor.black
         ]
         
         let responsibilitiesString = NSAttributedString(string: work.responsibilities, attributes: responsibilitiesAttributes)
         let boundingRect = responsibilitiesString.boundingRect(
             with: CGSize(width: maxWidth, height: CGFloat.greatestFiniteMagnitude),
             options: [.usesLineFragmentOrigin, .usesFontLeading],
             context: nil
         )
         
         let drawRect = CGRect(x: startX, y: startY, width: maxWidth, height: boundingRect.height)
         responsibilitiesString.draw(in: drawRect)
         
         print("üìù –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: \(work.responsibilities.prefix(50))...")
         
         return startY + boundingRect.height + 20
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –±–ª–æ–∫ Education
      */
     private func drawEducationBlock(formData: SurveyFormData, startY: CGFloat, in context: CGContext) -> CGFloat {
         // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∞ Education
         let blockWidth: CGFloat = 1093
         let blockHeight: CGFloat = 1096
         let rightMargin: CGFloat = 174
         
         // –ü–æ–∑–∏—Ü–∏—è –±–ª–æ–∫–∞ (—Å–ø—Ä–∞–≤–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
         let blockX = pageSize.width - rightMargin - blockWidth
         let blockY = startY
         
         let blockRect = CGRect(
             x: blockX,
             y: blockY,
             width: blockWidth,
             height: blockHeight
         )
         
         print("üéì –ë–ª–æ–∫ Education: (\(blockX), \(blockY)), —Ä–∞–∑–º–µ—Ä \(blockWidth)x\(blockHeight)")
         
         var currentY = blockY
         
         // 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ EDUCATION
         currentY = drawEducationTitle(startX: blockX, startY: currentY, in: context)
         
         // 2. –ú–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
         let finalY = drawEducationEntries(formData: formData, startX: blockX, startY: currentY, blockWidth: blockWidth, in: context)
         
         return finalY
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ EDUCATION
      */
     private func drawEducationTitle(startX: CGFloat, startY: CGFloat, in context: CGContext) -> CGFloat {
         let titleFont = UIFont(name: "Ruda-ExtraBold", size: 80) ?? UIFont.boldSystemFont(ofSize: 80)
         let titleAttributes: [NSAttributedString.Key: Any] = [
             .font: titleFont,
             .foregroundColor: UIColor.black
         ]
         
         let titleString = NSAttributedString(string: "EDUCATION", attributes: titleAttributes)
         let titleSize = titleString.size()
         
         titleString.draw(at: CGPoint(x: startX, y: startY))
         
         print("üìö –ó–∞–≥–æ–ª–æ–≤–æ–∫ EDUCATION –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(startX), \(startY))")
         
         return startY + titleSize.height + 40 // –û—Ç—Å—Ç—É–ø –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≤—Å–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      */
     private func drawEducationEntries(formData: SurveyFormData, startX: CGFloat, startY: CGFloat, blockWidth: CGFloat, in context: CGContext) -> CGFloat {
         var currentY = startY
         
         for (index, education) in formData.educations.enumerated() {
             currentY = drawSingleEducationEntry(
                 education: education,
                 startX: startX,
                 startY: currentY,
                 blockWidth: blockWidth,
                 in: context
             )
             
             // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –º–µ—Å—Ç–∞–º–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
             if index < formData.educations.count - 1 {
                 currentY += 60
             }
         }
         
         print("üéì –û—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ \(formData.educations.count) –º–µ—Å—Ç –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
         
         return currentY
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –º–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      */
     private func drawSingleEducationEntry(education: EducationData, startX: CGFloat, startY: CGFloat, blockWidth: CGFloat, in context: CGContext) -> CGFloat {
         var currentY = startY
         
         // 1. –°—Ç—Ä–µ–ª–∫–∞ arrowDown
         let arrowX = startX
         let arrowY = currentY
         let arrowSize = CGSize(width: 48, height: 40)
         
         if let arrowImage = UIImage(named: "arrowDown") {
             let arrowRect = CGRect(x: arrowX, y: arrowY, width: arrowSize.width, height: arrowSize.height)
             arrowImage.draw(in: arrowRect)
             print("‚¨áÔ∏è –°—Ç—Ä–µ–ª–∫–∞ arrowDown –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(arrowX), \(arrowY))")
         } else {
             // Fallback: —á–µ—Ä–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞
             context.setFillColor(UIColor.black.cgColor)
             let arrowRect = CGRect(x: arrowX, y: arrowY, width: arrowSize.width, height: arrowSize.height)
             context.fill(arrowRect)
             print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ arrowDown –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω fallback")
         }
         
         // 2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–ø—Ä–∞–≤–∞ –æ—Ç —Å—Ç—Ä–µ–ª–∫–∏
         let textStartX = arrowX + arrowSize.width + 20 // –û—Ç—Å—Ç—É–ø –æ—Ç —Å—Ç—Ä–µ–ª–∫–∏
         let textWidth = blockWidth - (textStartX - startX)
         
         var textY = currentY
         
         // –ù–∞–∑–≤–∞–Ω–∏–µ –≤—É–∑–∞
         textY = drawEducationSchool(education: education, startX: textStartX, startY: textY, maxWidth: textWidth, in: context)
         
         // –î–∞—Ç—ã
         textY = drawEducationDates(education: education, startX: textStartX, startY: textY, maxWidth: textWidth, in: context)
         
         // –û–ø–∏—Å–∞–Ω–∏–µ
         textY = drawEducationDetails(education: education, startX: textStartX, startY: textY, maxWidth: textWidth, in: context)
         
         // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É (–ª–∏–±–æ —Å—Ç—Ä–µ–ª–∫–∞, –ª–∏–±–æ —Ç–µ–∫—Å—Ç)
         let arrowBottom = arrowY + arrowSize.height
         return max(arrowBottom, textY)
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—É–∑–∞
      */
     private func drawEducationSchool(education: EducationData, startX: CGFloat, startY: CGFloat, maxWidth: CGFloat, in context: CGContext) -> CGFloat {
         let schoolFont = UIFont(name: "Ruda-ExtraBold", size: 50) ?? UIFont.boldSystemFont(ofSize: 50)
         let schoolAttributes: [NSAttributedString.Key: Any] = [
             .font: schoolFont,
             .foregroundColor: UIColor.black
         ]
         
         let schoolString = NSAttributedString(string: education.schoolName, attributes: schoolAttributes)
         let boundingRect = schoolString.boundingRect(
             with: CGSize(width: maxWidth, height: CGFloat.greatestFiniteMagnitude),
             options: [.usesLineFragmentOrigin, .usesFontLeading],
             context: nil
         )
         
         let drawRect = CGRect(x: startX, y: startY, width: maxWidth, height: boundingRect.height)
         schoolString.draw(in: drawRect)
         
         print("üéì –í—É–∑: \(education.schoolName)")
         
         return startY + boundingRect.height + 10
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –¥–∞—Ç—ã –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      */
     private func drawEducationDates(education: EducationData, startX: CGFloat, startY: CGFloat, maxWidth: CGFloat, in context: CGContext) -> CGFloat {
         let dateFont = UIFont(name: "Ruda-ExtraBold", size: 50) ?? UIFont.boldSystemFont(ofSize: 50)
         let dateAttributes: [NSAttributedString.Key: Any] = [
             .font: dateFont,
             .foregroundColor: UIColor.black
         ]
         
         let dateText = education.isCurrentlyStudying ? 
             "[\(education.whenStart) - Present]" : 
             "[\(education.whenStart) - \(education.whenFinished)]"
         
         let dateString = NSAttributedString(string: dateText, attributes: dateAttributes)
         let boundingRect = dateString.boundingRect(
             with: CGSize(width: maxWidth, height: CGFloat.greatestFiniteMagnitude),
             options: [.usesLineFragmentOrigin, .usesFontLeading],
             context: nil
         )
         
         let drawRect = CGRect(x: startX, y: startY, width: maxWidth, height: boundingRect.height)
         dateString.draw(in: drawRect)
         
         print("üìÖ –î–∞—Ç—ã –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: \(dateText)")
         
         return startY + boundingRect.height + 10
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      */
     private func drawEducationDetails(education: EducationData, startX: CGFloat, startY: CGFloat, maxWidth: CGFloat, in context: CGContext) -> CGFloat {
         guard !education.educationalDetails.isEmpty else {
             return startY
         }
         
         let detailsFont = UIFont(name: "Figtree-Regular", size: 36) ?? UIFont.systemFont(ofSize: 36)
         let detailsAttributes: [NSAttributedString.Key: Any] = [
             .font: detailsFont,
             .foregroundColor: UIColor.black
         ]
         
         let detailsString = NSAttributedString(string: education.educationalDetails, attributes: detailsAttributes)
         let boundingRect = detailsString.boundingRect(
             with: CGSize(width: maxWidth, height: CGFloat.greatestFiniteMagnitude),
             options: [.usesLineFragmentOrigin, .usesFontLeading],
             context: nil
         )
         
         let drawRect = CGRect(x: startX, y: startY, width: maxWidth, height: boundingRect.height)
         detailsString.draw(in: drawRect)
         
         print("üìù –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: \(education.educationalDetails.prefix(50))...")
         
         return startY + boundingRect.height + 20
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –±–ª–æ–∫ Skills
      */
     private func drawSkillsBlock(formData: SurveyFormData, startY: CGFloat, in context: CGContext) {
         // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∞ Skills
         let blockWidth: CGFloat = 1093
         let rightMargin: CGFloat = 174
         
         // –ü–æ–∑–∏—Ü–∏—è –±–ª–æ–∫–∞ (—Å–ø—Ä–∞–≤–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
         let blockX = pageSize.width - rightMargin - blockWidth
         let blockY = startY
         
         print("üõ†Ô∏è –ë–ª–æ–∫ Skills: (\(blockX), \(blockY)), —à–∏—Ä–∏–Ω–∞ \(blockWidth)")
         
         var currentY = blockY
         
         // 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ SKILLS
         currentY = drawSkillsTitle(startX: blockX, startY: currentY, in: context)
         
         // 2. –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
         let selectedSkills = getSelectedSkills(formData: formData)
         
         // 3. –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ—Ç–∫—É –Ω–∞–≤—ã–∫–æ–≤
         drawSkillsGrid(skills: selectedSkills, startX: blockX, startY: currentY, blockWidth: blockWidth, in: context)
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ SKILLS
      */
     private func drawSkillsTitle(startX: CGFloat, startY: CGFloat, in context: CGContext) -> CGFloat {
         let titleFont = UIFont(name: "Ruda-ExtraBold", size: 80) ?? UIFont.boldSystemFont(ofSize: 80)
         let titleAttributes: [NSAttributedString.Key: Any] = [
             .font: titleFont,
             .foregroundColor: UIColor.black
         ]
         
         let titleString = NSAttributedString(string: "SKILLS", attributes: titleAttributes)
         let titleSize = titleString.size()
         
         titleString.draw(at: CGPoint(x: startX, y: startY))
         
         print("üõ†Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ SKILLS –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(startX), \(startY))")
         
         return startY + titleSize.height + 40 // –û—Ç—Å—Ç—É–ø –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–µ—Ç–∫—É –Ω–∞–≤—ã–∫–æ–≤ (3 –≤ —Ä—è–¥—É)
      */
     private func drawSkillsGrid(skills: [String], startX: CGFloat, startY: CGFloat, blockWidth: CGFloat, in context: CGContext) {
         let skillsPerRow = 3
         let iconSize: CGFloat = 200
         let textHeight: CGFloat = 80 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
         let itemHeight = iconSize + textHeight + 20 // –ò–∫–æ–Ω–∫–∞ + —Ç–µ–∫—Å—Ç + –æ—Ç—Å—Ç—É–ø
         let horizontalSpacing = (blockWidth - CGFloat(skillsPerRow) * iconSize) / CGFloat(skillsPerRow - 1)
         
         var currentY = startY
         
         for (index, skill) in skills.enumerated() {
             let row = index / skillsPerRow
             let column = index % skillsPerRow
             
             // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
             let itemX = startX + CGFloat(column) * (iconSize + horizontalSpacing)
             let itemY = currentY + CGFloat(row) * (itemHeight + 60) // 60px –º–µ–∂–¥—É —Ä—è–¥–∞–º–∏
             
             // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –æ–¥–∏–Ω –Ω–∞–≤—ã–∫
             drawSingleSkill(skill: skill, x: itemX, y: itemY, iconSize: iconSize, in: context)
         }
         
         print("üõ†Ô∏è –û—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ \(skills.count) –Ω–∞–≤—ã–∫–æ–≤ –≤ —Å–µ—Ç–∫–µ 3x\(Int(ceil(Double(skills.count) / 3.0)))")
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –Ω–∞–≤—ã–∫ (–∏–∫–æ–Ω–∫–∞ + —Ç–µ–∫—Å—Ç)
      */
     private func drawSingleSkill(skill: String, x: CGFloat, y: CGFloat, iconSize: CGFloat, in context: CGContext) {
         // 1. –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
         let iconRect = CGRect(x: x, y: y, width: iconSize, height: iconSize)
         
         if let iconImage = UIImage(named: "100icon") {
             iconImage.draw(in: iconRect)
             print("üîß –ò–∫–æ–Ω–∫–∞ 100icon –¥–ª—è –Ω–∞–≤—ã–∫–∞ '\(skill)' –≤ –ø–æ–∑–∏—Ü–∏–∏ (\(x), \(y))")
         } else {
             // Fallback: —Å–µ—Ä—ã–π –∫–≤–∞–¥—Ä–∞—Ç —Å —Å–∏–º–≤–æ–ª–æ–º
             context.setFillColor(UIColor.lightGray.cgColor)
             context.fill(iconRect)
             
             let fallbackFont = UIFont.systemFont(ofSize: 60, weight: .bold)
             let fallbackAttributes: [NSAttributedString.Key: Any] = [
                 .font: fallbackFont,
                 .foregroundColor: UIColor.darkGray
             ]
             
             let fallbackString = NSAttributedString(string: "üõ†Ô∏è", attributes: fallbackAttributes)
             let textSize = fallbackString.size()
             
             let textX = x + (iconSize - textSize.width) / 2
             let textY = y + (iconSize - textSize.height) / 2
             fallbackString.draw(at: CGPoint(x: textX, y: textY))
             
             print("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ 100icon –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è '\(skill)', –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω fallback")
         }
         
         // 2. –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –ø–æ–¥ –∏–∫–æ–Ω–∫–æ–π
         let skillFont = UIFont(name: "Ruda-ExtraBold", size: 50) ?? UIFont.boldSystemFont(ofSize: 50)
         
         // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
         let paragraphStyle = NSMutableParagraphStyle()
         paragraphStyle.alignment = .center
         
         let skillAttributes: [NSAttributedString.Key: Any] = [
             .font: skillFont,
             .foregroundColor: UIColor.black,
             .paragraphStyle: paragraphStyle
         ]
         
         let skillString = NSAttributedString(string: skill, attributes: skillAttributes)
         let maxTextWidth: CGFloat = 400
         
         // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫
         let boundingRect = skillString.boundingRect(
             with: CGSize(width: maxTextWidth, height: CGFloat.greatestFiniteMagnitude),
             options: [.usesLineFragmentOrigin, .usesFontLeading],
             context: nil
         )
         
         // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –ø–æ–¥ –∏–∫–æ–Ω–∫–æ–π
         let textX = x + (iconSize - maxTextWidth) / 2
         let textY = y + iconSize + 20 // 20px –æ—Ç—Å—Ç—É–ø –æ—Ç –∏–∫–æ–Ω–∫–∏
         
         let textRect = CGRect(x: textX, y: textY, width: maxTextWidth, height: boundingRect.height)
         skillString.draw(in: textRect)
         
         print("üìù –ù–∞–≤—ã–∫ '\(skill)' –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω –ø–æ–¥ –∏–∫–æ–Ω–∫–æ–π —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º, —Ä–∞–∑–º–µ—Ä \(maxTextWidth)x\(boundingRect.height)")
     }
     
     /**
      * –ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏–∑ formData
      */
     private func getSelectedSkills(formData: SurveyFormData) -> [String] {
         let hardSkills = formData.additionalSkills.hardSkills.filter { $0.active }.map { $0.name }
         let softSkills = formData.additionalSkills.softSkills.filter { $0.active }.map { $0.name }
         let allSkills = hardSkills + softSkills
         
         print("üõ†Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: \(allSkills.count) (Hard: \(hardSkills.count), Soft: \(softSkills.count))")
         
         return allSkills
     }
     
     /**
      * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      */
     private func drawDecorativeImages(in context: CGContext) {
         // 1. –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_3_3lines (–±–æ–ª—å—à–æ–µ)
         let image1Size = CGSize(width: 340, height: 280)
         let image1Position = CGPoint(x: 190, y: 190)
         let image1Rect = CGRect(origin: image1Position, size: image1Size)
         
         if let image1 = UIImage(named: "pdf_3_3lines") {
             image1.draw(in: image1Rect)
             print("üé® –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1: pdf_3_3lines (340x280) –≤ –ø–æ–∑–∏—Ü–∏–∏ (350, 350)")
         } else {
             // Fallback: –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–µ—Ä—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
             context.setFillColor(UIColor.lightGray.withAlphaComponent(0.3).cgColor)
             context.fill(image1Rect)
             print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_3_3lines –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω fallback –≤ –ø–æ–∑–∏—Ü–∏–∏ (350, 350)")
         }
         
         // 2. –í—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_3_3lines (–º–∞–ª–µ–Ω—å–∫–æ–µ)
         let image2Size = CGSize(width: 187, height: 156)
         let image2Position = CGPoint(x: 2300, y: 1500)
         let image2Rect = CGRect(origin: image2Position, size: image2Size)
         
         if let image2 = UIImage(named: "pdf_3_3lines") {
             image2.draw(in: image2Rect)
             print("üé® –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2: pdf_3_3lines (187x156) –≤ –ø–æ–∑–∏—Ü–∏–∏ (2000, 1500)")
         } else {
             // Fallback: –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–µ—Ä—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
             context.setFillColor(UIColor.lightGray.withAlphaComponent(0.3).cgColor)
             context.fill(image2Rect)
             print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ pdf_3_3lines –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω fallback –≤ –ø–æ–∑–∏—Ü–∏–∏ (2000, 1500)")
         }
         
         print("üé® –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω—ã –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
     }
 
 }   
