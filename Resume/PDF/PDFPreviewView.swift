//
//  PDFPreviewView.swift
//  Resume
//
//  Created by –ê–ª–∫–µ–∫—Å–∞–Ω–¥—Ä –°—Ç–µ–ø–∞–Ω–æ–≤ on 02.09.2025.
//

import SwiftUI
import PDFKit

// MARK: - PDF Preview View
/**
 * SwiftUI View –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å PDF
 */
struct PDFPreviewView: View {
    
    // MARK: - Properties
    /// –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
    @ObservedObject var formData: SurveyFormData
    
    /// –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    var userPhoto: UIImage?
    
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
    @State private var pdfData: Data?
    @State private var isGenerating = false
    @State private var generationError: String?
    
    /// PDF Generator
    @StateObject private var pdfGenerator = PDF_1_Generator()
    
    // MARK: - Body
    var body: some View {
        NavigationView {
            VStack {
                if isGenerating {
                    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                    VStack(spacing: 20) {
                        ProgressView()
                            .scaleEffect(1.5)
                        Text("Generating PDF...")
                            .font(.headline)
                            .foregroundColor(.secondary)
                    }
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
                    
                } else if let error = generationError {
                    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
                    VStack(spacing: 20) {
                        Image(systemName: "exclamationmark.triangle")
                            .font(.system(size: 50))
                            .foregroundColor(.red)
                        
                        Text("Error generating PDF")
                            .font(.headline)
                        
                        Text(error)
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .multilineTextAlignment(.center)
                        
                        Button("Try Again") {
                            generatePDF()
                        }
                        .buttonStyle(.borderedProminent)
                    }
                    .padding()
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
                    
                } else if let data = pdfData {
                    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ PDF
                    PDFKitView(data: data)
                        .navigationTitle("Resume Preview")
                        .navigationBarTitleDisplayMode(.inline)
                        .toolbar {
                            ToolbarItemGroup(placement: .navigationBarTrailing) {
                                // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PDF
                                Button(action: generatePDF) {
                                    Image(systemName: "arrow.clockwise")
                                }
                                
                                // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞/–ø–æ–¥–µ–ª–∏—Ç—å—Å—è
                                Button(action: sharePDF) {
                                    Image(systemName: "square.and.arrow.up")
                                }
                            }
                        }
                    
                } else {
                    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    VStack(spacing: 20) {
                        Image(systemName: "doc.text")
                            .font(.system(size: 50))
                            .foregroundColor(.secondary)
                        
                        Text("PDF Preview")
                            .font(.headline)
                        
                        Text("Tap the button below to generate your resume PDF")
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .multilineTextAlignment(.center)
                        
                        Button("Generate PDF") {
                            generatePDF()
                        }
                        .buttonStyle(.borderedProminent)
                    }
                    .padding()
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
                }
            }
        }
        .onAppear {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ view
            generatePDF()
        }
    }
    
    // MARK: - PDF Generation
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PDF_1_Generator
     */
    private func generatePDF() {
        isGenerating = true
        generationError = nil
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        DispatchQueue.global(qos: .userInitiated).async {
            do {
                let data = pdfGenerator.generatePDF(formData: formData, userPhoto: userPhoto)
                
                DispatchQueue.main.async {
                    if let pdfData = data {
                        self.pdfData = pdfData
                        print("‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä: \(pdfData.count) –±–∞–π—Ç")
                    } else {
                        self.generationError = "Failed to generate PDF data"
                        print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF")
                    }
                    self.isGenerating = false
                }
            } catch {
                DispatchQueue.main.async {
                    self.generationError = error.localizedDescription
                    self.isGenerating = false
                    print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: \(error)")
                }
            }
        }
    }
    
    // MARK: - PDF Sharing
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞/–æ—Ç–ø—Ä–∞–≤–∫–∏ PDF
     */
    private func sharePDF() {
        guard let data = pdfData else { return }
        
        let activityController = UIActivityViewController(
            activityItems: [data],
            applicationActivities: nil
        )
        
        // –î–ª—è iPad - –∑–∞–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ popover
        if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let window = scene.windows.first,
           let rootViewController = window.rootViewController {
            
            if let popover = activityController.popoverPresentationController {
                popover.sourceView = window
                popover.sourceRect = CGRect(x: window.bounds.midX, y: window.bounds.midY, width: 0, height: 0)
                popover.permittedArrowDirections = []
            }
            
            rootViewController.present(activityController, animated: true)
        }
    }
}

// MARK: - PDFKit Integration
/**
 * UIViewRepresentable wrapper –¥–ª—è PDFView –∏–∑ PDFKit
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å PDF –≤ SwiftUI
 */
struct PDFKitView: UIViewRepresentable {
    
    // MARK: - Properties
    /// PDF –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let data: Data
    
    // MARK: - UIViewRepresentable
    /**
     * –°–æ–∑–¥–∞–µ—Ç PDFView –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
     */
    func makeUIView(context: Context) -> PDFView {
        let pdfView = PDFView()
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        pdfView.autoScales = true  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        pdfView.displayMode = .singlePage  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pdfView.displayDirection = .vertical  // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        pdfView.interpolationQuality = .high
        
        // –í–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        pdfView.enableDataDetectors = true
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
        if let document = PDFDocument(data: data) {
            pdfView.document = document
            pdfView.go(to: document.page(at: 0)!)  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            print("üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ PDFView, —Å—Ç—Ä–∞–Ω–∏—Ü: \(document.pageCount)")
        } else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDFDocument –∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        }
        
        return pdfView
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç PDFView –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    func updateUIView(_ uiView: PDFView, context: Context) {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        if let document = PDFDocument(data: data) {
            uiView.document = document
            uiView.go(to: document.page(at: 0)!)
            print("üîÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ PDFView")
        }
    }
}

// MARK: - Preview
/**
 * Preview –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PDFPreviewView
 */
#Preview {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    let testFormData = SurveyFormData()
    testFormData.name = "John"
    testFormData.surname = "Doe"
    testFormData.email = "john.doe@example.com"
    testFormData.phone = "+1 (555) 123-4567"
    testFormData.website = "www.johndoe.com"
    testFormData.address = "123 Main St, New York, NY"
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    let education = EducationData()
    education.schoolName = "Harvard University"
    education.whenStart = "09/2018"
    education.whenFinished = "05/2022"
    education.isCurrentlyStudying = false
    testFormData.educations.append(education)
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é —Ç–µ—Å—Ç–æ–≤—É—é —à–∫–æ–ª—É
    let education2 = EducationData()
    education2.schoolName = "MIT"
    education2.whenStart = "09/2022"
    education2.isCurrentlyStudying = true
    testFormData.educations.append(education2)
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞–±–æ—Ç—É
    let work = WorkData()
    work.companyName = "Apple Inc."
    work.position = "Software Engineer"
    work.companiLocation = "Cupertino, CA"
    work.whenStart = "06/2022"
    work.isCurentlyWork = true
    testFormData.works.append(work)
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞–±–æ—Ç—É
    let work2 = WorkData()
    work2.companyName = "Google"
    work2.position = "Junior Developer"
    work2.companiLocation = "Mountain View, CA"
    work2.whenStart = "01/2021"
    work2.whenFinished = "05/2022"
    work2.isCurentlyWork = false
    testFormData.works.append(work2)
    
    return PDFPreviewView(formData: testFormData)
} 
 