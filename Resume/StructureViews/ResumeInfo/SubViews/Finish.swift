//
//  Finish.swift
//  Resume
//
//  Created by –ê–ª–∫–µ–∫—Å–∞–Ω–¥—Ä –°—Ç–µ–ø–∞–Ω–æ–≤ on 01.09.2025.
//

import SwiftUI
import PDFKit
import CoreData

struct Finish: View {
    @ObservedObject var formData: SurveyFormData
    @ObservedObject var surveyManager: SurveyManager
    @State private var stepNumber = 7  // Finish screen (8-–π —à–∞–≥, –∏–Ω–¥–µ–∫—Å 7)
    @State private var stepsTextArray = Arrays.stepsTextArray
    @StateObject private var keyboardObserver = KeyboardObserver()
    
    // MARK: - PDF Management
    @StateObject private var pdfGenerator = PDF_1_Generator()
    @StateObject private var pdf2Generator = PDF_2_Generator()
    @StateObject private var pdf3Generator = PDF_3_Generator()
    @State private var pdfThumbnailImage: UIImage?
    @State private var pdf2ThumbnailImage: UIImage?
    @State private var pdf3ThumbnailImage: UIImage?
    @State private var showingPDFView = false
    @State private var showingPDF2View = false
    @State private var showingPDF3View = false
    @State private var showingPDF3Share = false
    
    // MARK: - Photo Management
    @State private var profilePhoto: UIImage?
    @State private var showingPhotoPicker = false
    @State private var photoUpdateID = UUID() // –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PDF
    
    var body: some View {
        ScrollView(showsIndicators: false) {
            VStack(alignment: .leading, spacing: screenHeight*0.02) {
                Image(.personFinishFrame)
                    .resizable()
                    .scaledToFit()
                    .overlay(
                        HStack {
                            Button(action: {
                                showingPhotoPicker = true
                            }) {
                                if let profilePhoto = profilePhoto {
                                    Image(uiImage: profilePhoto)
                                        .resizable()
                                        .scaledToFill()
                                        .frame(width: screenHeight*0.15, height: screenHeight*0.18)
                                        .clipShape(RoundedRectangle(cornerRadius: 12))
                                } else {
                                    Image(.noPhoto)
                                        .resizable()
                                        .scaledToFit()
                                        .frame(height: screenHeight*0.18)
                                }
                            }
                            VStack(alignment: .leading) {
                                HStack {
                                    Text(formData.name)
                                        .font(Font.custom("Figtree-SemiBold", size: screenHeight*0.03))
                                        .foregroundStyle(Color.white)
                                    Text(formData.surname)
                                        .font(Font.custom("Figtree-SemiBold", size: screenHeight*0.03))
                                        .foregroundStyle(Color.white)
                                }
                                Text(formData.works[0].position)
                                    .font(Font.custom("Figtree-Regular", size: screenHeight*0.016))
                                    .foregroundStyle(Color.onboardingColor2)
                                Rectangle()
                                    .fill(Color.onboardingColor2)
                                    .frame(height: screenHeight*0.001)
                                HStack {
                                    Image(.at)
                                        .resizable()
                                        .scaledToFit()
                                        .frame(height: screenHeight*0.02)
                                    Text(formData.email)
                                        .font(Font.custom("Figtree-Regular", size: screenHeight*0.016))
                                        .foregroundStyle(Color.white)
                                }
                                HStack {
                                    Image(.phone)
                                        .resizable()
                                        .scaledToFit()
                                        .frame(height: screenHeight*0.02)
                                    Text(formData.phone)
                                        .font(Font.custom("Figtree-Regular", size: screenHeight*0.016))
                                        .foregroundStyle(Color.white)
                                }
                            }
                            Spacer()
                        }
                            .padding()
                    )
                
                // MARK: - PDF Thumbnail Section
                PDFThumbnailView()
                    .padding(.top, screenHeight*0.03)
            }
            .frame(maxWidth: .infinity, alignment: .topLeading)
//            .frame(maxWidth: screenWidth*0.9)
            .padding(.top, screenHeight*0.2)
            .padding(.bottom, keyboardObserver.isKeyboardVisible ? screenHeight*0.4 : screenHeight*0.15)
            .animation(.easeInOut(duration: 0.3), value: keyboardObserver.isKeyboardVisible)
        }
        .sheet(isPresented: $showingPDFView) {
            PDFPreviewView(formData: formData, userPhoto: formData.photos.first?.image)
                .id(photoUpdateID) // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º view –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
        }
        .sheet(isPresented: $showingPDF2View) {
            PDFPreview2View(formData: formData, userPhoto: formData.photos.first?.image)
                .id(photoUpdateID) // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º view –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
        }
        .sheet(isPresented: $showingPDF3View) {
            PDFPreview3View(formData: formData, userPhoto: formData.photos.first?.image)
                .id(photoUpdateID) // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º view –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
        }
        .sheet(isPresented: $showingPhotoPicker) {
            PhotoPicker(selectedImage: $profilePhoto)
        }
        .onAppear {
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print("üîç Finish onAppear - –¥–∞–Ω–Ω—ã–µ –≤ formData:")
            print("üìù Name: '\(formData.name)', Surname: '\(formData.surname)'")
            print("üìß Email: '\(formData.email)', Phone: '\(formData.phone)'")
            print("üéì Educations count: \(formData.educations.count)")
            if !formData.educations.isEmpty {
                print("üéì First education: '\(formData.educations[0].schoolName)'")
            }
            print("üíº Works count: \(formData.works.count)")
            if !formData.works.isEmpty {
                print("üíº First work: '\(formData.works[0].companyName)' - '\(formData.works[0].position)'")
            }
            print("üìù Summary: '\(formData.summaryData.summaryText)'")
            print("üì∑ Photos count: \(formData.photos.count)")
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CoreData –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π PDF
            surveyManager.saveDraft()
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CoreData
            surveyManager.forceReloadFromCoreData()
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            print("üîÑ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:")
            print("üéì Educations count: \(formData.educations.count)")
            print("üíº Works count: \(formData.works.count)")
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π PDF —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                generatePDFThumbnail()
            }
            loadProfilePhoto()
        }
        .onChange(of: profilePhoto) { _ in
            saveProfilePhoto()
            
            // –î–∞–µ–º –≤—Ä–µ–º—è CoreData —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                surveyManager.forceReloadFromCoreData()
                generatePDFThumbnail() // –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é PDF —Å –Ω–æ–≤—ã–º —Ñ–æ—Ç–æ
                photoUpdateID = UUID() // –û–±–Ω–æ–≤–ª—è–µ–º ID –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF view
            }
        }
    }
    
    // MARK: - Photo Management Functions
    
    private func loadProfilePhoto() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∏–∑ formData.photos –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–µ
        if let firstPhoto = formData.photos.first,
           let image = firstPhoto.image {
            profilePhoto = image
        }
    }
    
    private func saveProfilePhoto() {

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –≤ formData.photos
        if let photo = profilePhoto {
            let photoData = PhotoData()
            photoData.image = photo
            photoData.fileName = "profile_\(Date().timeIntervalSince1970).jpg"
            photoData.createdAt = Date()
            
            // –ó–∞–º–µ–Ω—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
            if formData.photos.isEmpty {
                formData.photos.append(photoData)
            } else {
                formData.photos[0] = photoData
            }
            
            // –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CoreData
            savePhotoToCoreData(photo)
            
            print("üì∑ –ü—Ä–æ—Ñ–∏–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å –∏ CoreData")
        }
    }
    
    private func savePhotoToCoreData(_ image: UIImage) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ –∏ SurveyManager
        let viewContext = surveyManager.context
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫ Person
        let request: NSFetchRequest<Person> = Person.fetchRequest()
        request.predicate = NSPredicate(format: "isDraft == true")
        request.sortDescriptors = [NSSortDescriptor(key: "lastModified", ascending: false)]
        request.fetchLimit = 1
        
        do {
            let drafts = try viewContext.fetch(request)
            
            guard let currentDraft = drafts.first else {
                print("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ savePhotoToCoreData")
                return
            }
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ Person
            deleteExistingPhotosFromCoreData(for: currentDraft, context: viewContext)
            

            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤ CoreData
            let photo = Photo(context: viewContext)
            
            // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
            if let compressedData = image.jpegData(compressionQuality: 0.8) {
                photo.imageData = compressedData
            }
            
            // –°–æ–∑–¥–∞–µ–º thumbnail
            if let thumbnail = image.resized(to: CGSize(width: 150, height: 150)),
               let thumbnailData = thumbnail.jpegData(compressionQuality: 0.7) {
                photo.thumbnailData = thumbnailData
            }
            
            photo.fileName = "profile_\(Date().timeIntervalSince1970).jpg"
            photo.createdAt = Date()
            photo.person = currentDraft
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            try viewContext.save()
            print("üì∑ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ CoreData")
            

            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ CoreData: \(error)")
        }
    }
    
    private func deleteExistingPhotosFromCoreData(for person: Person, context: NSManagedObjectContext) {
        let request: NSFetchRequest<Photo> = Photo.fetchRequest()
        request.predicate = NSPredicate(format: "person == %@", person)
        
        do {
            let existingPhotos = try context.fetch(request)
            for photo in existingPhotos {
                context.delete(photo)
            }
            print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ: \(existingPhotos.count)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ: \(error)")
        }
    }
    
    // üë§ Personal Information Card
    @ViewBuilder
    private func PersonalInfoCard() -> some View {
        VStack(alignment: .leading, spacing: screenHeight*0.01) {
            Text("Personal Information")
                .font(Font.custom("Figtree-Medium", size: screenHeight*0.025))
                .foregroundStyle(Color.black)
            
            ZStack {
                Image(.textFieldFrame)
                    .resizable()
                    .scaledToFit()
                    .frame(width: screenWidth*0.9)
                
                VStack(alignment: .leading, spacing: screenHeight*0.008) {
                    // –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
                    HStack {
                        Text("Name:")
                            .font(Font.custom("Figtree-Medium", size: screenHeight*0.02))
                            .foregroundStyle(Color.gray)
                        Text("\(formData.name) \(formData.surname)")
                            .font(Font.custom("Figtree-Regular", size: screenHeight*0.02))
                            .foregroundStyle(Color.black)
                    }
                    
                    // Email
                    if !formData.email.isEmpty {
                        HStack {
                            Text("Email:")
                                .font(Font.custom("Figtree-Medium", size: screenHeight*0.02))
                                .foregroundStyle(Color.gray)
                            Text(formData.email)
                                .font(Font.custom("Figtree-Regular", size: screenHeight*0.02))
                                .foregroundStyle(Color.black)
                        }
                    }
                    
                    // Phone
                    if !formData.phone.isEmpty {
                        HStack {
                            Text("Phone:")
                                .font(Font.custom("Figtree-Medium", size: screenHeight*0.02))
                                .foregroundStyle(Color.gray)
                            Text(formData.phone)
                                .font(Font.custom("Figtree-Regular", size: screenHeight*0.02))
                                .foregroundStyle(Color.black)
                        }
                    }
                    
                    // Website
                    if !formData.website.isEmpty {
                        HStack {
                            Text("Website:")
                                .font(Font.custom("Figtree-Medium", size: screenHeight*0.02))
                                .foregroundStyle(Color.gray)
                            Text(formData.website)
                                .font(Font.custom("Figtree-Regular", size: screenHeight*0.02))
                                .foregroundStyle(Color.blue)
                        }
                    }
                    
                    // Address
                    if !formData.address.isEmpty {
                        HStack {
                            Text("Address:")
                                .font(Font.custom("Figtree-Medium", size: screenHeight*0.02))
                                .foregroundStyle(Color.gray)
                            Text(formData.address)
                                .font(Font.custom("Figtree-Regular", size: screenHeight*0.02))
                                .foregroundStyle(Color.black)
                        }
                    }
                }
                .padding(.horizontal, screenWidth*0.1)
                .frame(maxWidth: .infinity, alignment: .leading)
            }
        }
    }
    
    // üéì Education Card
    @ViewBuilder
    private func EducationCard() -> some View {
        VStack(alignment: .leading, spacing: screenHeight*0.01) {
            Text("Education")
                .font(Font.custom("Figtree-Medium", size: screenHeight*0.025))
                .foregroundStyle(Color.black)
            
            ForEach(Array(formData.educations.enumerated()), id: \.element.id) { index, education in
                ZStack {
                    Image(.educationFrame)
                        .resizable()
                        .scaledToFit()
                        .frame(width: screenWidth*0.9)
                    
                    VStack(alignment: .leading, spacing: screenHeight*0.008) {
                        // School Name
                        Text(education.schoolName)
                            .font(Font.custom("Figtree-Medium", size: screenHeight*0.022))
                            .foregroundStyle(Color.black)
                        
                        // Period
                        HStack {
                            Text("Period:")
                                .font(Font.custom("Figtree-Regular", size: screenHeight*0.018))
                                .foregroundStyle(Color.gray)
                            
                            if education.isCurrentlyStudying {
                                Text("\(education.whenStart) - Present")
                                    .font(Font.custom("Figtree-Regular", size: screenHeight*0.018))
                                    .foregroundStyle(Color.black)
                            } else {
                                Text("\(education.whenStart) - \(education.whenFinished)")
                                    .font(Font.custom("Figtree-Regular", size: screenHeight*0.018))
                                    .foregroundStyle(Color.black)
                            }
                        }
                    }
                    .padding(.horizontal, screenWidth*0.1)
                    .frame(maxWidth: .infinity, alignment: .leading)
                }
            }
        }
    }
    
    // üíº Work Experience Card
    @ViewBuilder
    private func WorkExperienceCard() -> some View {
        VStack(alignment: .leading, spacing: screenHeight*0.01) {
            Text("Work Experience")
                .font(Font.custom("Figtree-Medium", size: screenHeight*0.025))
                .foregroundStyle(Color.black)
            
            ForEach(Array(formData.works.enumerated()), id: \.element.id) { index, work in
                ZStack {
                    Image(.educationFrame)
                        .resizable()
                        .scaledToFit()
                        .frame(width: screenWidth*0.9)
                    
                    VStack(alignment: .leading, spacing: screenHeight*0.008) {
                        // Company Name
                        Text(work.companyName)
                            .font(Font.custom("Figtree-Medium", size: screenHeight*0.022))
                            .foregroundStyle(Color.black)
                        
                        // Position
                        Text(work.position)
                            .font(Font.custom("Figtree-Regular", size: screenHeight*0.02))
                            .foregroundStyle(Color.blue)
                        
                        // Location
                        if !work.companiLocation.isEmpty {
                            Text(work.companiLocation)
                                .font(Font.custom("Figtree-Regular", size: screenHeight*0.018))
                                .foregroundStyle(Color.gray)
                        }
                        
                        // Period
                        HStack {
                            Text("Period:")
                                .font(Font.custom("Figtree-Regular", size: screenHeight*0.018))
                                .foregroundStyle(Color.gray)
                            
                            if work.isCurentlyWork {
                                Text("\(work.whenStart) - Present")
                                    .font(Font.custom("Figtree-Regular", size: screenHeight*0.018))
                                    .foregroundStyle(Color.black)
                            } else {
                                Text("\(work.whenStart) - \(work.whenFinished)")
                                    .font(Font.custom("Figtree-Regular", size: screenHeight*0.018))
                                    .foregroundStyle(Color.black)
                            }
                        }
                    }
                    .padding(.horizontal, screenWidth*0.1)
                    .frame(maxWidth: .infinity, alignment: .leading)
                }
            }
        }
    }
}

#Preview {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    let (testFormData, testSurveyManager) = {
        let formData = SurveyFormData()
        formData.name = "John"
        formData.surname = "Doe"
        formData.email = "john.doe@example.com"
        formData.phone = "+1 (555) 123-4567"
        formData.website = "www.johndoe.com"
        formData.address = "123 Main St, New York, NY"
        formData.adress_1 = "Apt 4B"
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        let education = EducationData()
        education.schoolName = "Harvard University"
        education.whenStart = "09/2018"
        education.whenFinished = "05/2022"
        education.isCurrentlyStudying = false
        formData.educations.append(education)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞–±–æ—Ç—É
        let work = WorkData()
        work.companyName = "Apple Inc."
        work.position = "Software Engineer"
        work.companiLocation = "Cupertino, CA"
        work.whenStart = "06/2022"
        work.whenFinished = "Present"
        work.isCurentlyWork = true
        formData.works.append(work)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π summary
        let summaryData = SummaryData()
        summaryData.summaryText = "Experienced software engineer with expertise in iOS development."
        formData.summaryData = summaryData
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π SurveyManager
        let surveyManager = SurveyManager(context: PersistenceController.preview.container.viewContext)
        surveyManager.formData = formData
        
        return (formData, surveyManager)
    }()
    
    Finish(formData: testFormData, surveyManager: testSurveyManager)
}

// MARK: - PDF Thumbnail Extension
extension Finish {
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∏–Ω–∏–∞—Ç—é—Ä—É PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
     */
    private func generatePDFThumbnail() {
        DispatchQueue.global(qos: .userInitiated).async {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É –¥–ª—è PDF_1
            if let pdfData = pdfGenerator.generatePDF(formData: formData, userPhoto: formData.photos.first?.image),
               let pdfDocument = PDFDocument(data: pdfData),
               let firstPage = pdfDocument.page(at: 0) {
                
                let thumbnailSize = CGSize(width: 200, height: 283) // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ A4
                let thumbnail = firstPage.thumbnail(of: thumbnailSize, for: .mediaBox)
                
                DispatchQueue.main.async {
                    self.pdfThumbnailImage = thumbnail
                    print("‚úÖ PDF_1 –º–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                }
            } else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF_1 –º–∏–Ω–∏–∞—Ç—é—Ä—É")
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É –¥–ª—è PDF_2
            if let pdf2Data = pdf2Generator.generatePDF(formData: formData, userPhoto: formData.photos.first?.image),
               let pdf2Document = PDFDocument(data: pdf2Data),
               let firstPage2 = pdf2Document.page(at: 0) {
                
                let thumbnailSize = CGSize(width: 200, height: 283) // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ A4
                let thumbnail2 = firstPage2.thumbnail(of: thumbnailSize, for: .mediaBox)
                
                DispatchQueue.main.async {
                    self.pdf2ThumbnailImage = thumbnail2
                    print("‚úÖ PDF_2 –º–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                }
            } else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF_2 –º–∏–Ω–∏–∞—Ç—é—Ä—É")
            }
            
            // Generate thumbnail for PDF_3
            if let pdf3Data = pdf3Generator.generatePDF(formData: formData, userPhoto: formData.photos.first?.image),
               let pdf3Document = PDFDocument(data: pdf3Data),
               let firstPage3 = pdf3Document.page(at: 0) {
                
                let thumbnailSize = CGSize(width: 200, height: 283) // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ A4
                let thumbnail3 = firstPage3.thumbnail(of: thumbnailSize, for: .mediaBox)
                
                DispatchQueue.main.async {
                    self.pdf3ThumbnailImage = thumbnail3
                    print("‚úÖ PDF_3 –º–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                }
            } else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF_3 –º–∏–Ω–∏–∞—Ç—é—Ä—É")
            }
        }
    }
    
    /**
     * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã PDF
     */
    @ViewBuilder
    private func PDFThumbnailView() -> some View {
        VStack(alignment: .leading, spacing: screenHeight*0.02) {
            
            
            VStack(spacing: screenHeight*0.03) {
                // –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥: Template 1 –∏ Template 2
                HStack(spacing: screenWidth*0.05) {
                    // Template 1
                    VStack(spacing: screenHeight*0.01) {
                        Button(action: {
                            // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º PDF
                            surveyManager.saveDraft()
                            surveyManager.forceReloadFromCoreData()
                            showingPDFView = true
                            print("üìÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä PDF Template 1")
                        }) {
                            ZStack {
                                // –§–æ–Ω –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã
                                RoundedRectangle(cornerRadius: 15)
                                    .fill(Color.white)
                                    .frame(width: screenWidth*0.4, height: screenWidth*0.56) // A4 –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                                    .shadow(color: .black.opacity(0.2), radius: 10, x: 0, y: 5)
                                
                                if let thumbnail = pdfThumbnailImage {
                                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –º–∏–Ω–∏–∞—Ç—é—Ä—É PDF
                                    Image(uiImage: thumbnail)
                                        .resizable()
                                        .scaledToFit()
                                        .frame(width: screenWidth*0.4, height: screenWidth*0.56)
                                        .clipShape(RoundedRectangle(cornerRadius: 15))
                                } else {
                                    // Placeholder –ø–æ–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
                                    VStack(spacing: 10) {
                                        ProgressView()
                                            .scaleEffect(1.0)
                                        
                                        Text("Generating...")
                                            .font(Font.custom("Figtree-Regular", size: screenHeight*0.014))
                                            .foregroundStyle(Color.gray)
                                    }
                                }
                            }
                        }
                        .buttonStyle(PlainButtonStyle())
                        
                        // Download Button
                        Button(action: {
                            downloadPDF1()
                        }) {
                            HStack {
                                Image(.downloadIcon)
                                    .resizable()
                                    .scaledToFit()
                                    .frame(height: screenHeight*0.025)
                                Text("Download PDF")
                                    .font(Font.custom("Figtree-Regular", size: screenHeight*0.016))
                                    .foregroundStyle(Color.gray)
                            }
                        }
                        .frame(width: screenWidth*0.4)
                    }
                    
                    // Template 2
                    VStack(spacing: screenHeight*0.01) {
                        Button(action: {
                            // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º PDF
                            surveyManager.saveDraft()
                            surveyManager.forceReloadFromCoreData()
                            showingPDF2View = true
                            print("üìÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä PDF Template 2")
                        }) {
                            ZStack {
                                // –§–æ–Ω –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã
                                RoundedRectangle(cornerRadius: 15)
                                    .fill(Color.white)
                                    .frame(width: screenWidth*0.4, height: screenWidth*0.56) // A4 –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                                    .shadow(color: .black.opacity(0.2), radius: 10, x: 0, y: 5)
                                
                                if let thumbnail = pdf2ThumbnailImage {
                                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –º–∏–Ω–∏–∞—Ç—é—Ä—É PDF
                                    Image(uiImage: thumbnail)
                                        .resizable()
                                        .scaledToFit()
                                        .frame(width: screenWidth*0.4, height: screenWidth*0.56)
                                        .clipShape(RoundedRectangle(cornerRadius: 15))
                                } else {
                                    // Placeholder –ø–æ–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
                                    VStack(spacing: 10) {
                                        ProgressView()
                                            .scaleEffect(1.0)
                                        
                                        Text("Generating...")
                                            .font(Font.custom("Figtree-Regular", size: screenHeight*0.014))
                                            .foregroundStyle(Color.gray)
                                    }
                                }
                            }
                        }
                        .buttonStyle(PlainButtonStyle())
                        
                        // Download Button
                        Button(action: {
                            downloadPDF2()
                        }) {
                            HStack {
                                Image(.downloadIcon)
                                    .resizable()
                                    .scaledToFit()
                                    .frame(height: screenHeight*0.025)
                                Text("Download PDF")
                                    .font(Font.custom("Figtree-Regular", size: screenHeight*0.016))
                                    .foregroundStyle(Color.gray)
                            }
                        }
                        .frame(width: screenWidth*0.4)
                    }
                }
                
                // –ù–∏–∂–Ω–∏–π —Ä—è–¥: Template 3
                HStack(spacing: screenWidth*0.05) {
                    // Template 3
                    VStack(spacing: screenHeight*0.01) {
                        Button(action: {
                            // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º PDF
                            surveyManager.saveDraft()
                            surveyManager.forceReloadFromCoreData()
                            showingPDF3View = true
                            print("üìÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä PDF Template 3")
                        }) {
                            ZStack {
                                // –§–æ–Ω –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã
                                RoundedRectangle(cornerRadius: 15)
                                    .fill(Color.white)
                                    .frame(width: screenWidth*0.4, height: screenWidth*0.56) // A4 –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                                    .shadow(color: .black.opacity(0.2), radius: 10, x: 0, y: 5)
                                
                                if let thumbnail = pdf3ThumbnailImage {
                                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –º–∏–Ω–∏–∞—Ç—é—Ä—É PDF
                                    Image(uiImage: thumbnail)
                                        .resizable()
                                        .scaledToFit()
                                        .frame(width: screenWidth*0.4, height: screenWidth*0.56)
                                        .clipShape(RoundedRectangle(cornerRadius: 15))
                                } else {
                                    // Placeholder –ø–æ–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
                                    VStack(spacing: 10) {
                                        ProgressView()
                                            .scaleEffect(1.0)
                                        
                                        Text("Generating...")
                                            .font(Font.custom("Figtree-Regular", size: screenHeight*0.014))
                                            .foregroundStyle(Color.gray)
                                    }
                                }
                            }
                        }
                        .buttonStyle(PlainButtonStyle())
                        
                        Button(action: {
                            downloadPDF3()
                        }) {
                            HStack {
                                Image(.downloadIcon)
                                    .resizable()
                                    .scaledToFit()
                                    .frame(height: screenHeight*0.025)
                                Text("Download PDF")
                                    .font(Font.custom("Figtree-Regular", size: screenHeight*0.016))
                                    .foregroundStyle(Color.gray)
                            }
                        }
                        .frame(width: screenWidth*0.4)
                    }
                    
                    Spacer() // –ü—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ —Å–ø—Ä–∞–≤–∞ –æ—Ç Template 3
                }
            }
            .frame(maxWidth: .infinity, alignment: .leading)
            .padding(.horizontal, screenWidth*0.1)
        }
    }
    
    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç PDF Template 1
     */
    private func downloadPDF1() {
        print("üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF Template 1")
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
        surveyManager.saveDraft()
        surveyManager.forceReloadFromCoreData()
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF_1
        guard let pdf1Data = pdfGenerator.generatePDF(formData: formData, userPhoto: formData.photos.first?.image) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF Template 1")
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        let fileName = "\(formData.name)_\(formData.surname)_Resume_Template1.pdf"
        let tempURL = FileManager.default.temporaryDirectory.appendingPathComponent(fileName)
        
        do {
            try pdf1Data.write(to: tempURL)
            print("‚úÖ PDF Template 1 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: \(tempURL)")
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏
            DispatchQueue.main.async {
                self.sharePDF1(url: tempURL)
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PDF Template 1: \(error)")
        }
    }
    
    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç PDF Template 2
     */
    private func downloadPDF2() {
        print("üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF Template 2")
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
        surveyManager.saveDraft()
        surveyManager.forceReloadFromCoreData()
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF_2
        guard let pdf2Data = pdf2Generator.generatePDF(formData: formData, userPhoto: formData.photos.first?.image) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF Template 2")
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        let fileName = "\(formData.name)_\(formData.surname)_Resume_Template2.pdf"
        let tempURL = FileManager.default.temporaryDirectory.appendingPathComponent(fileName)
        
        do {
            try pdf2Data.write(to: tempURL)
            print("‚úÖ PDF Template 2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: \(tempURL)")
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏
            DispatchQueue.main.async {
                self.sharePDF2(url: tempURL)
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PDF Template 2: \(error)")
        }
    }
    
    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç PDF Template 3
     */
    private func downloadPDF3() {
        print("üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF Template 3")
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
        surveyManager.saveDraft()
        surveyManager.forceReloadFromCoreData()
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF_3
        guard let pdf3Data = pdf3Generator.generatePDF(formData: formData, userPhoto: formData.photos.first?.image) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF Template 3")
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        let fileName = "\(formData.name)_\(formData.surname)_Resume_Template3.pdf"
        let tempURL = FileManager.default.temporaryDirectory.appendingPathComponent(fileName)
        
        do {
            try pdf3Data.write(to: tempURL)
            print("‚úÖ PDF Template 3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: \(tempURL)")
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏
            DispatchQueue.main.async {
                self.sharePDF3(url: tempURL)
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PDF Template 3: \(error)")
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF Template 3
     */
    private func sharePDF3(url: URL) {
        let activityController = UIActivityViewController(
            activityItems: [url],
            applicationActivities: nil
        )
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        activityController.setValue("\(formData.name) \(formData.surname) - Resume Template 3", forKey: "subject")
        
        // –î–ª—è iPad - –∑–∞–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ popover
        if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let window = scene.windows.first,
           let rootViewController = window.rootViewController {
            
            if let popover = activityController.popoverPresentationController {
                popover.sourceView = window
                popover.sourceRect = CGRect(x: window.bounds.midX, y: window.bounds.midY, width: 0, height: 0)
                popover.permittedArrowDirections = []
            }
            
            rootViewController.present(activityController, animated: true) {
                print("üì§ –°–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF Template 3 –æ—Ç–∫—Ä—ã—Ç–æ")
            }
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF Template 1
     */
    private func sharePDF1(url: URL) {
        let activityController = UIActivityViewController(
            activityItems: [url],
            applicationActivities: nil
        )
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        activityController.setValue("\(formData.name) \(formData.surname) - Resume Template 1", forKey: "subject")
        
        // –î–ª—è iPad - –∑–∞–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ popover
        if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let window = scene.windows.first,
           let rootViewController = window.rootViewController {
            
            if let popover = activityController.popoverPresentationController {
                popover.sourceView = window
                popover.sourceRect = CGRect(x: window.bounds.midX, y: window.bounds.midY, width: 0, height: 0)
                popover.permittedArrowDirections = []
            }
            
            rootViewController.present(activityController, animated: true) {
                print("üì§ –°–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF Template 1 –æ—Ç–∫—Ä—ã—Ç–æ")
            }
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF Template 2
     */
    private func sharePDF2(url: URL) {
        let activityController = UIActivityViewController(
            activityItems: [url],
            applicationActivities: nil
        )
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        activityController.setValue("\(formData.name) \(formData.surname) - Resume Template 2", forKey: "subject")
        
        // –î–ª—è iPad - –∑–∞–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ popover
        if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let window = scene.windows.first,
           let rootViewController = window.rootViewController {
            
            if let popover = activityController.popoverPresentationController {
                popover.sourceView = window
                popover.sourceRect = CGRect(x: window.bounds.midX, y: window.bounds.midY, width: 0, height: 0)
                popover.permittedArrowDirections = []
            }
            
            rootViewController.present(activityController, animated: true) {
                print("üì§ –°–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF Template 2 –æ—Ç–∫—Ä—ã—Ç–æ")
            }
        }
    }
    
}
