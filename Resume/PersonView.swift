//
//  PersonView.swift
//  Resume
//
//  Created by –ê–ª–∫–µ–∫—Å–∞–Ω–¥—Ä –°—Ç–µ–ø–∞–Ω–æ–≤ on 24.08.2025.
//

import SwiftUI
import CoreData

struct PersonView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @StateObject private var dataManager = PersonDataManager()
    
    // –î–ª—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ Person
    @State private var name = ""
    @State private var surname = ""
    @State private var email = ""
    @State private var phone = ""
    @State private var website = ""
    @State private var address = ""
    
    // FetchRequest –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Person –∏–∑ CoreData
    @FetchRequest(
        sortDescriptors: [NSSortDescriptor(keyPath: \Person.name, ascending: true)],
        animation: .default)
    private var persons: FetchedResults<Person>
    
    var body: some View {
        NavigationView {
            VStack {
                // –§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ Person
                Form {
                    Section(header: Text("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–µ–∑—é–º–µ")) {
                        TextField("–ò–º—è", text: $name)
                        TextField("–§–∞–º–∏–ª–∏—è", text: $surname)
                        TextField("Email", text: $email)
                            .keyboardType(.emailAddress)
                        TextField("–¢–µ–ª–µ—Ñ–æ–Ω", text: $phone)
                            .keyboardType(.phonePad)
                        TextField("–í–µ–±-—Å–∞–π—Ç", text: $website)
                            .keyboardType(.URL)
                        TextField("–ê–¥—Ä–µ—Å", text: $address)
                        
                        Button("–°–æ–∑–¥–∞—Ç—å") {
                            createPerson()
                        }
                        .disabled(name.isEmpty || surname.isEmpty)
                    }
                }
                .frame(maxHeight: 350)
                
                // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö Person
                List {
                    ForEach(persons) { person in
                        PersonRowView(person: person)
                    }
                    .onDelete(perform: deletePersons)
                }
            }
            .navigationTitle("–†–µ–∑—é–º–µ")
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    EditButton()
                }
            }
        }
    }
    
    // MARK: - –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    
    private func createPerson() {
        withAnimation {
            dataManager.createPerson(
                name: name,
                surname: surname,
                email: email,
                phone: phone,
                website: website,
                address: address
            )
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            clearForm()
        }
    }
    
    private func clearForm() {
        name = ""
        surname = ""
        email = ""
        phone = ""
        website = ""
        address = ""
    }
    
    private func deletePersons(offsets: IndexSet) {
        withAnimation {
            offsets.map { persons[$0] }.forEach { person in
                dataManager.deletePerson(person)
            }
        }
    }
}

// MARK: - PersonRowView –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ Person
struct PersonRowView: View {
    let person: Person
    
    var body: some View {
        VStack(alignment: .leading, spacing: 4) {
            HStack {
                Text("\(person.name ?? "") \(person.surname ?? "")")
                    .font(.headline)
                Spacer()
            }
            
            if let email = person.email, !email.isEmpty {
                Text("üìß \(email)")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            if let phone = person.phone, !phone.isEmpty {
                Text("üì± \(phone)")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            if let website = person.website, !website.isEmpty {
                Text("üåê \(website)")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            if let address = person.address, !address.isEmpty {
                Text("üìç \(address)")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
        }
        .padding(.vertical, 2)
    }
}

#Preview {
    PersonView().environment(\.managedObjectContext, PersistenceController.preview.container.viewContext)
} 